// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vadd_join_page_Pipeline_VITIS_LOOP_29_3_VITIS_LOOP_33_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_result_pair_din,
        s_result_pair_num_data_valid,
        s_result_pair_fifo_cap,
        s_result_pair_full_n,
        s_result_pair_write,
        page_A_left_address0,
        page_A_left_ce0,
        page_A_left_q0,
        page_A_left_address1,
        page_A_left_ce1,
        page_A_left_q1,
        page_A_left_address2,
        page_A_left_ce2,
        page_A_left_q2,
        page_A_right_address0,
        page_A_right_ce0,
        page_A_right_q0,
        page_A_right_address1,
        page_A_right_ce1,
        page_A_right_q1,
        page_A_right_address2,
        page_A_right_ce2,
        page_A_right_q2,
        page_A_top_address0,
        page_A_top_ce0,
        page_A_top_q0,
        page_A_top_address1,
        page_A_top_ce1,
        page_A_top_q1,
        page_A_top_address2,
        page_A_top_ce2,
        page_A_top_q2,
        page_A_bottom_address0,
        page_A_bottom_ce0,
        page_A_bottom_q0,
        page_A_bottom_address1,
        page_A_bottom_ce1,
        page_A_bottom_q1,
        page_A_bottom_address2,
        page_A_bottom_ce2,
        page_A_bottom_q2,
        page_entry_num_load,
        bound,
        page_A_obj_id_address0,
        page_A_obj_id_ce0,
        page_A_obj_id_q0,
        page_B_obj_id_address0,
        page_B_obj_id_ce0,
        page_B_obj_id_q0,
        page_B_left_address0,
        page_B_left_ce0,
        page_B_left_q0,
        page_B_right_address0,
        page_B_right_ce0,
        page_B_right_q0,
        page_B_top_address0,
        page_B_top_ce0,
        page_B_top_q0,
        page_B_bottom_address0,
        page_B_bottom_ce0,
        page_B_bottom_q0,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] s_result_pair_din;
input  [9:0] s_result_pair_num_data_valid;
input  [9:0] s_result_pair_fifo_cap;
input   s_result_pair_full_n;
output   s_result_pair_write;
output  [13:0] page_A_left_address0;
output   page_A_left_ce0;
input  [31:0] page_A_left_q0;
output  [13:0] page_A_left_address1;
output   page_A_left_ce1;
input  [31:0] page_A_left_q1;
output  [13:0] page_A_left_address2;
output   page_A_left_ce2;
input  [31:0] page_A_left_q2;
output  [13:0] page_A_right_address0;
output   page_A_right_ce0;
input  [31:0] page_A_right_q0;
output  [13:0] page_A_right_address1;
output   page_A_right_ce1;
input  [31:0] page_A_right_q1;
output  [13:0] page_A_right_address2;
output   page_A_right_ce2;
input  [31:0] page_A_right_q2;
output  [13:0] page_A_top_address0;
output   page_A_top_ce0;
input  [31:0] page_A_top_q0;
output  [13:0] page_A_top_address1;
output   page_A_top_ce1;
input  [31:0] page_A_top_q1;
output  [13:0] page_A_top_address2;
output   page_A_top_ce2;
input  [31:0] page_A_top_q2;
output  [13:0] page_A_bottom_address0;
output   page_A_bottom_ce0;
input  [31:0] page_A_bottom_q0;
output  [13:0] page_A_bottom_address1;
output   page_A_bottom_ce1;
input  [31:0] page_A_bottom_q1;
output  [13:0] page_A_bottom_address2;
output   page_A_bottom_ce2;
input  [31:0] page_A_bottom_q2;
input  [30:0] page_entry_num_load;
input  [61:0] bound;
output  [13:0] page_A_obj_id_address0;
output   page_A_obj_id_ce0;
input  [31:0] page_A_obj_id_q0;
output  [13:0] page_B_obj_id_address0;
output   page_B_obj_id_ce0;
input  [31:0] page_B_obj_id_q0;
output  [13:0] page_B_left_address0;
output   page_B_left_ce0;
input  [31:0] page_B_left_q0;
output  [13:0] page_B_right_address0;
output   page_B_right_ce0;
input  [31:0] page_B_right_q0;
output  [13:0] page_B_top_address0;
output   page_B_top_ce0;
input  [31:0] page_B_top_q0;
output  [13:0] page_B_bottom_address0;
output   page_B_bottom_ce0;
input  [31:0] page_B_bottom_q0;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg s_result_pair_write;
reg page_A_left_ce0;
reg page_A_left_ce1;
reg page_A_left_ce2;
reg page_A_right_ce0;
reg page_A_right_ce1;
reg page_A_right_ce2;
reg page_A_top_ce0;
reg page_A_top_ce1;
reg page_A_top_ce2;
reg page_A_bottom_ce0;
reg page_A_bottom_ce1;
reg page_A_bottom_ce2;
reg page_A_obj_id_ce0;
reg page_B_obj_id_ce0;
reg page_B_left_ce0;
reg page_B_right_ce0;
reg page_B_top_ce0;
reg page_B_bottom_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg   [0:0] or_ln48_reg_1192;
reg   [0:0] or_ln48_reg_1192_pp0_iter4_reg;
reg   [0:0] or_ln50_4_reg_1236;
reg    ap_predicate_op193_write_state6;
reg    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln29_fu_398_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    s_result_pair_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln33_fu_393_p2;
reg   [0:0] icmp_ln33_reg_1034;
reg   [0:0] icmp_ln29_reg_1046;
wire   [63:0] zext_ln31_fu_447_p1;
reg   [63:0] zext_ln31_reg_1050;
reg   [63:0] zext_ln31_reg_1050_pp0_iter2_reg;
reg   [63:0] zext_ln31_reg_1050_pp0_iter3_reg;
wire   [63:0] zext_ln33_fu_463_p1;
reg   [63:0] zext_ln33_reg_1095;
reg   [63:0] zext_ln33_reg_1095_pp0_iter2_reg;
reg   [63:0] zext_ln33_reg_1095_pp0_iter3_reg;
reg   [31:0] page_A_top_load_1_reg_1122;
reg   [31:0] page_A_bottom_load_1_reg_1127;
wire   [30:0] select_ln29_4_fu_600_p3;
reg   [30:0] select_ln29_4_reg_1132;
wire   [0:0] select_ln29_5_fu_617_p3;
reg   [0:0] select_ln29_5_reg_1137;
reg   [0:0] select_ln29_5_reg_1137_pp0_iter3_reg;
wire   [30:0] select_ln29_6_fu_636_p3;
reg   [30:0] select_ln29_6_reg_1142;
wire   [0:0] select_ln29_7_fu_653_p3;
reg   [0:0] select_ln29_7_reg_1147;
reg   [0:0] select_ln29_7_reg_1147_pp0_iter3_reg;
wire   [0:0] and_ln48_fu_735_p2;
reg   [0:0] and_ln48_reg_1172;
wire   [0:0] and_ln48_2_fu_816_p2;
reg   [0:0] and_ln48_2_reg_1177;
wire   [0:0] or_ln48_fu_832_p2;
wire   [0:0] icmp_ln50_fu_865_p2;
reg   [0:0] icmp_ln50_reg_1196;
wire   [0:0] icmp_ln50_2_fu_871_p2;
reg   [0:0] icmp_ln50_2_reg_1201;
wire   [0:0] icmp_ln50_3_fu_877_p2;
reg   [0:0] icmp_ln50_3_reg_1206;
wire   [0:0] icmp_ln50_4_fu_910_p2;
reg   [0:0] icmp_ln50_4_reg_1211;
wire   [0:0] icmp_ln50_5_fu_916_p2;
reg   [0:0] icmp_ln50_5_reg_1216;
wire   [0:0] icmp_ln50_6_fu_922_p2;
reg   [0:0] icmp_ln50_6_reg_1221;
wire   [0:0] or_ln50_4_fu_968_p2;
reg    ap_condition_exit_pp0_iter2_stage0;
wire   [63:0] zext_ln29_fu_385_p1;
wire   [63:0] zext_ln29_1_fu_423_p1;
reg   [30:0] n_fu_82;
wire   [30:0] add_ln33_fu_469_p2;
wire    ap_loop_init;
reg   [30:0] m_fu_86;
wire   [30:0] select_ln29_8_fu_455_p3;
reg   [61:0] indvar_flatten_fu_90;
wire   [61:0] add_ln29_fu_403_p2;
reg    ap_block_pp0_stage0_01001;
wire   [30:0] add_ln29_1_fu_417_p2;
wire   [13:0] trunc_ln29_fu_431_p1;
wire   [13:0] trunc_ln29_1_fu_435_p1;
wire   [13:0] select_ln29_1_fu_439_p3;
wire   [30:0] select_ln29_fu_409_p3;
wire   [31:0] bitcast_ln48_fu_490_p1;
wire   [22:0] trunc_ln48_fu_494_p1;
wire   [31:0] bitcast_ln48_3_fu_504_p1;
wire   [22:0] trunc_ln48_1_fu_508_p1;
wire   [31:0] bitcast_ln50_fu_518_p1;
wire   [22:0] trunc_ln50_fu_522_p1;
wire   [31:0] bitcast_ln50_3_fu_532_p1;
wire   [22:0] trunc_ln50_1_fu_536_p1;
wire   [31:0] bitcast_ln48_4_fu_546_p1;
wire   [22:0] trunc_ln48_2_fu_550_p1;
wire   [0:0] icmp_ln48_8_fu_554_p2;
wire   [0:0] icmp_ln48_1_fu_498_p2;
wire   [31:0] bitcast_ln48_5_fu_567_p1;
wire   [22:0] trunc_ln48_3_fu_571_p1;
wire   [0:0] icmp_ln48_9_fu_575_p2;
wire   [0:0] icmp_ln48_7_fu_512_p2;
wire   [31:0] bitcast_ln50_4_fu_588_p1;
wire   [30:0] trunc_ln29_2_fu_592_p1;
wire   [30:0] trunc_ln29_3_fu_596_p1;
wire   [22:0] trunc_ln50_2_fu_607_p1;
wire   [0:0] icmp_ln50_8_fu_611_p2;
wire   [0:0] icmp_ln50_1_fu_526_p2;
wire   [31:0] bitcast_ln50_5_fu_624_p1;
wire   [30:0] trunc_ln29_4_fu_628_p1;
wire   [30:0] trunc_ln29_5_fu_632_p1;
wire   [22:0] trunc_ln50_3_fu_643_p1;
wire   [0:0] icmp_ln50_9_fu_647_p2;
wire   [0:0] icmp_ln50_7_fu_540_p2;
wire   [7:0] tmp_fu_660_p4;
wire   [7:0] tmp_1_fu_670_p4;
wire   [31:0] bitcast_ln48_1_fu_687_p1;
wire   [7:0] select_ln29_9_fu_680_p3;
wire   [0:0] select_ln29_2_fu_560_p3;
wire   [0:0] icmp_ln48_fu_705_p2;
wire   [7:0] tmp_s_fu_691_p4;
wire   [22:0] trunc_ln48_4_fu_701_p1;
wire   [0:0] icmp_ln48_3_fu_723_p2;
wire   [0:0] icmp_ln48_2_fu_717_p2;
wire   [0:0] or_ln48_1_fu_711_p2;
wire   [0:0] or_ln48_2_fu_729_p2;
wire   [31:0] bitcast_ln48_2_fu_741_p1;
wire   [7:0] tmp_4_fu_759_p4;
wire   [7:0] tmp_5_fu_769_p4;
wire   [7:0] tmp_3_fu_745_p4;
wire   [22:0] trunc_ln48_5_fu_755_p1;
wire   [0:0] icmp_ln48_5_fu_792_p2;
wire   [0:0] icmp_ln48_4_fu_786_p2;
wire   [7:0] select_ln29_10_fu_779_p3;
wire   [0:0] select_ln29_3_fu_581_p3;
wire   [0:0] icmp_ln48_6_fu_804_p2;
wire   [0:0] or_ln48_3_fu_798_p2;
wire   [0:0] or_ln48_4_fu_810_p2;
wire   [0:0] grp_fu_339_p2;
wire   [0:0] grp_fu_345_p2;
wire   [0:0] and_ln48_1_fu_822_p2;
wire   [0:0] and_ln48_3_fu_827_p2;
wire   [31:0] bitcast_ln50_1_fu_847_p1;
wire   [7:0] tmp_7_fu_838_p4;
wire   [7:0] tmp_8_fu_851_p4;
wire   [22:0] trunc_ln50_4_fu_861_p1;
wire   [31:0] bitcast_ln50_2_fu_883_p1;
wire   [7:0] tmp_10_fu_887_p4;
wire   [22:0] trunc_ln50_5_fu_897_p1;
wire   [7:0] tmp_11_fu_901_p4;
wire   [0:0] or_ln50_1_fu_932_p2;
wire   [0:0] or_ln50_fu_928_p2;
wire   [0:0] and_ln50_fu_936_p2;
wire   [0:0] grp_fu_351_p2;
wire   [0:0] or_ln50_2_fu_948_p2;
wire   [0:0] or_ln50_3_fu_952_p2;
wire   [0:0] and_ln50_2_fu_956_p2;
wire   [0:0] grp_fu_356_p2;
wire   [0:0] and_ln50_3_fu_962_p2;
wire   [0:0] and_ln50_1_fu_942_p2;
reg    grp_fu_339_ce;
reg    ap_block_pp0_stage0_00001;
reg    grp_fu_345_ce;
reg    grp_fu_351_ce;
reg    grp_fu_356_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

vadd_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(page_A_right_q0),
    .din1(page_B_left_q0),
    .ce(grp_fu_339_ce),
    .opcode(5'd4),
    .dout(grp_fu_339_p2)
);

vadd_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(page_B_right_q0),
    .din1(page_A_left_q0),
    .ce(grp_fu_345_ce),
    .opcode(5'd4),
    .dout(grp_fu_345_p2)
);

vadd_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(page_A_bottom_load_1_reg_1127),
    .din1(page_B_top_q0),
    .ce(grp_fu_351_ce),
    .opcode(5'd2),
    .dout(grp_fu_351_p2)
);

vadd_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(page_B_bottom_q0),
    .din1(page_A_top_load_1_reg_1122),
    .ce(grp_fu_356_ce),
    .opcode(5'd2),
    .dout(grp_fu_356_p2)
);

vadd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_90 <= 62'd0;
        end else if (((icmp_ln29_fu_398_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_90 <= add_ln29_fu_403_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_fu_86 <= 31'd0;
        end else if (((icmp_ln29_fu_398_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            m_fu_86 <= select_ln29_8_fu_455_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            n_fu_82 <= 31'd0;
        end else if (((icmp_ln29_fu_398_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            n_fu_82 <= add_ln33_fu_469_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln29_reg_1046 == 1'd0))) begin
        and_ln48_2_reg_1177 <= and_ln48_2_fu_816_p2;
        and_ln48_reg_1172 <= and_ln48_fu_735_p2;
        select_ln29_4_reg_1132 <= select_ln29_4_fu_600_p3;
        select_ln29_5_reg_1137 <= select_ln29_5_fu_617_p3;
        select_ln29_6_reg_1142 <= select_ln29_6_fu_636_p3;
        select_ln29_7_reg_1147 <= select_ln29_7_fu_653_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln29_reg_1046 <= icmp_ln29_fu_398_p2;
        icmp_ln33_reg_1034 <= icmp_ln33_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        or_ln48_reg_1192 <= or_ln48_fu_832_p2;
        or_ln48_reg_1192_pp0_iter4_reg <= or_ln48_reg_1192;
        select_ln29_5_reg_1137_pp0_iter3_reg <= select_ln29_5_reg_1137;
        select_ln29_7_reg_1147_pp0_iter3_reg <= select_ln29_7_reg_1147;
        zext_ln31_reg_1050_pp0_iter2_reg[13 : 0] <= zext_ln31_reg_1050[13 : 0];
        zext_ln31_reg_1050_pp0_iter3_reg[13 : 0] <= zext_ln31_reg_1050_pp0_iter2_reg[13 : 0];
        zext_ln33_reg_1095_pp0_iter2_reg[30 : 0] <= zext_ln33_reg_1095[30 : 0];
        zext_ln33_reg_1095_pp0_iter3_reg[30 : 0] <= zext_ln33_reg_1095_pp0_iter2_reg[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln48_fu_832_p2 == 1'd0))) begin
        icmp_ln50_2_reg_1201 <= icmp_ln50_2_fu_871_p2;
        icmp_ln50_3_reg_1206 <= icmp_ln50_3_fu_877_p2;
        icmp_ln50_4_reg_1211 <= icmp_ln50_4_fu_910_p2;
        icmp_ln50_5_reg_1216 <= icmp_ln50_5_fu_916_p2;
        icmp_ln50_6_reg_1221 <= icmp_ln50_6_fu_922_p2;
        icmp_ln50_reg_1196 <= icmp_ln50_fu_865_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln48_reg_1192 == 1'd0))) begin
        or_ln50_4_reg_1236 <= or_ln50_4_fu_968_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln29_reg_1046 == 1'd0))) begin
        page_A_bottom_load_1_reg_1127 <= page_A_bottom_q0;
        page_A_top_load_1_reg_1122 <= page_A_top_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_398_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln31_reg_1050[13 : 0] <= zext_ln31_fu_447_p1[13 : 0];
        zext_ln33_reg_1095[30 : 0] <= zext_ln33_fu_463_p1[30 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_398_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln29_reg_1046 == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_339_ce = 1'b1;
    end else begin
        grp_fu_339_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_345_ce = 1'b1;
    end else begin
        grp_fu_345_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_351_ce = 1'b1;
    end else begin
        grp_fu_351_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_356_ce = 1'b1;
    end else begin
        grp_fu_356_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_A_bottom_ce0 = 1'b1;
    end else begin
        page_A_bottom_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_A_bottom_ce1 = 1'b1;
    end else begin
        page_A_bottom_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_A_bottom_ce2 = 1'b1;
    end else begin
        page_A_bottom_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_A_left_ce0 = 1'b1;
    end else begin
        page_A_left_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_A_left_ce1 = 1'b1;
    end else begin
        page_A_left_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_A_left_ce2 = 1'b1;
    end else begin
        page_A_left_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        page_A_obj_id_ce0 = 1'b1;
    end else begin
        page_A_obj_id_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_A_right_ce0 = 1'b1;
    end else begin
        page_A_right_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_A_right_ce1 = 1'b1;
    end else begin
        page_A_right_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_A_right_ce2 = 1'b1;
    end else begin
        page_A_right_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_A_top_ce0 = 1'b1;
    end else begin
        page_A_top_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_A_top_ce1 = 1'b1;
    end else begin
        page_A_top_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_A_top_ce2 = 1'b1;
    end else begin
        page_A_top_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        page_B_bottom_ce0 = 1'b1;
    end else begin
        page_B_bottom_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_B_left_ce0 = 1'b1;
    end else begin
        page_B_left_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        page_B_obj_id_ce0 = 1'b1;
    end else begin
        page_B_obj_id_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        page_B_right_ce0 = 1'b1;
    end else begin
        page_B_right_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        page_B_top_ce0 = 1'b1;
    end else begin
        page_B_top_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op193_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        s_result_pair_blk_n = s_result_pair_full_n;
    end else begin
        s_result_pair_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op193_write_state6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        s_result_pair_write = 1'b1;
    end else begin
        s_result_pair_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_1_fu_417_p2 = (m_fu_86 + 31'd1);

assign add_ln29_fu_403_p2 = (indvar_flatten_fu_90 + 62'd1);

assign add_ln33_fu_469_p2 = (select_ln29_fu_409_p3 + 31'd1);

assign and_ln48_1_fu_822_p2 = (grp_fu_339_p2 & and_ln48_reg_1172);

assign and_ln48_2_fu_816_p2 = (or_ln48_4_fu_810_p2 & or_ln48_3_fu_798_p2);

assign and_ln48_3_fu_827_p2 = (grp_fu_345_p2 & and_ln48_2_reg_1177);

assign and_ln48_fu_735_p2 = (or_ln48_2_fu_729_p2 & or_ln48_1_fu_711_p2);

assign and_ln50_1_fu_942_p2 = (grp_fu_351_p2 & and_ln50_fu_936_p2);

assign and_ln50_2_fu_956_p2 = (or_ln50_3_fu_952_p2 & or_ln50_2_fu_948_p2);

assign and_ln50_3_fu_962_p2 = (grp_fu_356_p2 & and_ln50_2_fu_956_p2);

assign and_ln50_fu_936_p2 = (or_ln50_fu_928_p2 & or_ln50_1_fu_932_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((ap_predicate_op193_write_state6 == 1'b1) & (s_result_pair_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_predicate_op193_write_state6 == 1'b1) & (s_result_pair_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_predicate_op193_write_state6 == 1'b1) & (s_result_pair_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_predicate_op193_write_state6 == 1'b1) & (s_result_pair_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5 = ((ap_predicate_op193_write_state6 == 1'b1) & (s_result_pair_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = s_result_pair_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op193_write_state6 = ((or_ln50_4_reg_1236 == 1'd0) & (or_ln48_reg_1192_pp0_iter4_reg == 1'd0));
end

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bitcast_ln48_1_fu_687_p1 = page_B_left_q0;

assign bitcast_ln48_2_fu_741_p1 = page_B_right_q0;

assign bitcast_ln48_3_fu_504_p1 = page_A_left_q2;

assign bitcast_ln48_4_fu_546_p1 = page_A_right_q1;

assign bitcast_ln48_5_fu_567_p1 = page_A_left_q1;

assign bitcast_ln48_fu_490_p1 = page_A_right_q2;

assign bitcast_ln50_1_fu_847_p1 = page_B_top_q0;

assign bitcast_ln50_2_fu_883_p1 = page_B_bottom_q0;

assign bitcast_ln50_3_fu_532_p1 = page_A_top_q2;

assign bitcast_ln50_4_fu_588_p1 = page_A_bottom_q1;

assign bitcast_ln50_5_fu_624_p1 = page_A_top_q1;

assign bitcast_ln50_fu_518_p1 = page_A_bottom_q2;

assign icmp_ln29_fu_398_p2 = ((indvar_flatten_fu_90 == bound) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_393_p2 = ((n_fu_82 == page_entry_num_load) ? 1'b1 : 1'b0);

assign icmp_ln48_1_fu_498_p2 = ((trunc_ln48_fu_494_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_2_fu_717_p2 = ((tmp_s_fu_691_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln48_3_fu_723_p2 = ((trunc_ln48_4_fu_701_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_4_fu_786_p2 = ((tmp_3_fu_745_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln48_5_fu_792_p2 = ((trunc_ln48_5_fu_755_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_6_fu_804_p2 = ((select_ln29_10_fu_779_p3 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln48_7_fu_512_p2 = ((trunc_ln48_1_fu_508_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_8_fu_554_p2 = ((trunc_ln48_2_fu_550_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_9_fu_575_p2 = ((trunc_ln48_3_fu_571_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_705_p2 = ((select_ln29_9_fu_680_p3 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_526_p2 = ((trunc_ln50_fu_522_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_2_fu_871_p2 = ((tmp_8_fu_851_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_3_fu_877_p2 = ((trunc_ln50_4_fu_861_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_4_fu_910_p2 = ((tmp_10_fu_887_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_5_fu_916_p2 = ((trunc_ln50_5_fu_897_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_6_fu_922_p2 = ((tmp_11_fu_901_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_7_fu_540_p2 = ((trunc_ln50_1_fu_536_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_8_fu_611_p2 = ((trunc_ln50_2_fu_607_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_9_fu_647_p2 = ((trunc_ln50_3_fu_643_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_865_p2 = ((tmp_7_fu_838_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln48_1_fu_711_p2 = (select_ln29_2_fu_560_p3 | icmp_ln48_fu_705_p2);

assign or_ln48_2_fu_729_p2 = (icmp_ln48_3_fu_723_p2 | icmp_ln48_2_fu_717_p2);

assign or_ln48_3_fu_798_p2 = (icmp_ln48_5_fu_792_p2 | icmp_ln48_4_fu_786_p2);

assign or_ln48_4_fu_810_p2 = (select_ln29_3_fu_581_p3 | icmp_ln48_6_fu_804_p2);

assign or_ln48_fu_832_p2 = (and_ln48_3_fu_827_p2 | and_ln48_1_fu_822_p2);

assign or_ln50_1_fu_932_p2 = (icmp_ln50_3_reg_1206 | icmp_ln50_2_reg_1201);

assign or_ln50_2_fu_948_p2 = (icmp_ln50_5_reg_1216 | icmp_ln50_4_reg_1211);

assign or_ln50_3_fu_952_p2 = (select_ln29_7_reg_1147_pp0_iter3_reg | icmp_ln50_6_reg_1221);

assign or_ln50_4_fu_968_p2 = (and_ln50_3_fu_962_p2 | and_ln50_1_fu_942_p2);

assign or_ln50_fu_928_p2 = (select_ln29_5_reg_1137_pp0_iter3_reg | icmp_ln50_reg_1196);

assign page_A_bottom_address0 = zext_ln31_fu_447_p1;

assign page_A_bottom_address1 = zext_ln29_1_fu_423_p1;

assign page_A_bottom_address2 = zext_ln29_fu_385_p1;

assign page_A_left_address0 = zext_ln31_fu_447_p1;

assign page_A_left_address1 = zext_ln29_1_fu_423_p1;

assign page_A_left_address2 = zext_ln29_fu_385_p1;

assign page_A_obj_id_address0 = zext_ln31_reg_1050_pp0_iter3_reg;

assign page_A_right_address0 = zext_ln31_fu_447_p1;

assign page_A_right_address1 = zext_ln29_1_fu_423_p1;

assign page_A_right_address2 = zext_ln29_fu_385_p1;

assign page_A_top_address0 = zext_ln31_fu_447_p1;

assign page_A_top_address1 = zext_ln29_1_fu_423_p1;

assign page_A_top_address2 = zext_ln29_fu_385_p1;

assign page_B_bottom_address0 = zext_ln33_reg_1095;

assign page_B_left_address0 = zext_ln33_fu_463_p1;

assign page_B_obj_id_address0 = zext_ln33_reg_1095_pp0_iter3_reg;

assign page_B_right_address0 = zext_ln33_fu_463_p1;

assign page_B_top_address0 = zext_ln33_reg_1095;

assign s_result_pair_din = {{page_B_obj_id_q0}, {page_A_obj_id_q0}};

assign select_ln29_10_fu_779_p3 = ((icmp_ln33_reg_1034[0:0] == 1'b1) ? tmp_4_fu_759_p4 : tmp_5_fu_769_p4);

assign select_ln29_1_fu_439_p3 = ((icmp_ln33_fu_393_p2[0:0] == 1'b1) ? trunc_ln29_fu_431_p1 : trunc_ln29_1_fu_435_p1);

assign select_ln29_2_fu_560_p3 = ((icmp_ln33_reg_1034[0:0] == 1'b1) ? icmp_ln48_8_fu_554_p2 : icmp_ln48_1_fu_498_p2);

assign select_ln29_3_fu_581_p3 = ((icmp_ln33_reg_1034[0:0] == 1'b1) ? icmp_ln48_9_fu_575_p2 : icmp_ln48_7_fu_512_p2);

assign select_ln29_4_fu_600_p3 = ((icmp_ln33_reg_1034[0:0] == 1'b1) ? trunc_ln29_2_fu_592_p1 : trunc_ln29_3_fu_596_p1);

assign select_ln29_5_fu_617_p3 = ((icmp_ln33_reg_1034[0:0] == 1'b1) ? icmp_ln50_8_fu_611_p2 : icmp_ln50_1_fu_526_p2);

assign select_ln29_6_fu_636_p3 = ((icmp_ln33_reg_1034[0:0] == 1'b1) ? trunc_ln29_4_fu_628_p1 : trunc_ln29_5_fu_632_p1);

assign select_ln29_7_fu_653_p3 = ((icmp_ln33_reg_1034[0:0] == 1'b1) ? icmp_ln50_9_fu_647_p2 : icmp_ln50_7_fu_540_p2);

assign select_ln29_8_fu_455_p3 = ((icmp_ln33_fu_393_p2[0:0] == 1'b1) ? add_ln29_1_fu_417_p2 : m_fu_86);

assign select_ln29_9_fu_680_p3 = ((icmp_ln33_reg_1034[0:0] == 1'b1) ? tmp_fu_660_p4 : tmp_1_fu_670_p4);

assign select_ln29_fu_409_p3 = ((icmp_ln33_fu_393_p2[0:0] == 1'b1) ? 31'd0 : n_fu_82);

assign tmp_10_fu_887_p4 = {{bitcast_ln50_2_fu_883_p1[30:23]}};

assign tmp_11_fu_901_p4 = {{select_ln29_6_reg_1142[30:23]}};

assign tmp_1_fu_670_p4 = {{bitcast_ln48_fu_490_p1[30:23]}};

assign tmp_3_fu_745_p4 = {{bitcast_ln48_2_fu_741_p1[30:23]}};

assign tmp_4_fu_759_p4 = {{bitcast_ln48_5_fu_567_p1[30:23]}};

assign tmp_5_fu_769_p4 = {{bitcast_ln48_3_fu_504_p1[30:23]}};

assign tmp_7_fu_838_p4 = {{select_ln29_4_reg_1132[30:23]}};

assign tmp_8_fu_851_p4 = {{bitcast_ln50_1_fu_847_p1[30:23]}};

assign tmp_fu_660_p4 = {{bitcast_ln48_4_fu_546_p1[30:23]}};

assign tmp_s_fu_691_p4 = {{bitcast_ln48_1_fu_687_p1[30:23]}};

assign trunc_ln29_1_fu_435_p1 = m_fu_86[13:0];

assign trunc_ln29_2_fu_592_p1 = bitcast_ln50_4_fu_588_p1[30:0];

assign trunc_ln29_3_fu_596_p1 = bitcast_ln50_fu_518_p1[30:0];

assign trunc_ln29_4_fu_628_p1 = bitcast_ln50_5_fu_624_p1[30:0];

assign trunc_ln29_5_fu_632_p1 = bitcast_ln50_3_fu_532_p1[30:0];

assign trunc_ln29_fu_431_p1 = add_ln29_1_fu_417_p2[13:0];

assign trunc_ln48_1_fu_508_p1 = bitcast_ln48_3_fu_504_p1[22:0];

assign trunc_ln48_2_fu_550_p1 = bitcast_ln48_4_fu_546_p1[22:0];

assign trunc_ln48_3_fu_571_p1 = bitcast_ln48_5_fu_567_p1[22:0];

assign trunc_ln48_4_fu_701_p1 = bitcast_ln48_1_fu_687_p1[22:0];

assign trunc_ln48_5_fu_755_p1 = bitcast_ln48_2_fu_741_p1[22:0];

assign trunc_ln48_fu_494_p1 = bitcast_ln48_fu_490_p1[22:0];

assign trunc_ln50_1_fu_536_p1 = bitcast_ln50_3_fu_532_p1[22:0];

assign trunc_ln50_2_fu_607_p1 = bitcast_ln50_4_fu_588_p1[22:0];

assign trunc_ln50_3_fu_643_p1 = bitcast_ln50_5_fu_624_p1[22:0];

assign trunc_ln50_4_fu_861_p1 = bitcast_ln50_1_fu_847_p1[22:0];

assign trunc_ln50_5_fu_897_p1 = bitcast_ln50_2_fu_883_p1[22:0];

assign trunc_ln50_fu_522_p1 = bitcast_ln50_fu_518_p1[22:0];

assign zext_ln29_1_fu_423_p1 = add_ln29_1_fu_417_p2;

assign zext_ln29_fu_385_p1 = m_fu_86;

assign zext_ln31_fu_447_p1 = select_ln29_1_fu_439_p3;

assign zext_ln33_fu_463_p1 = select_ln29_fu_409_p3;

always @ (posedge ap_clk) begin
    zext_ln31_reg_1050[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln31_reg_1050_pp0_iter2_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln31_reg_1050_pp0_iter3_reg[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    zext_ln33_reg_1095[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln33_reg_1095_pp0_iter2_reg[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln33_reg_1095_pp0_iter3_reg[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //vadd_join_page_Pipeline_VITIS_LOOP_29_3_VITIS_LOOP_33_4
