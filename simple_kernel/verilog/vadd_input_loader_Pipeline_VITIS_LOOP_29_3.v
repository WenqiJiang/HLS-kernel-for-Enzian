// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vadd_input_loader_Pipeline_VITIS_LOOP_29_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        s_page_A_din,
        s_page_A_num_data_valid,
        s_page_A_fifo_cap,
        s_page_A_full_n,
        s_page_A_write,
        s_page_B_din,
        s_page_B_num_data_valid,
        s_page_B_fifo_cap,
        s_page_B_full_n,
        s_page_B_write,
        sext_ln29,
        sext_ln24_1,
        addr_per_page,
        sext_ln24,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [511:0] m_axi_gmem0_WDATA;
output  [63:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [511:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [8:0] m_axi_gmem0_RFIFONUM;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [511:0] m_axi_gmem1_WDATA;
output  [63:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [511:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [8:0] m_axi_gmem1_RFIFONUM;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
output  [159:0] s_page_A_din;
input  [9:0] s_page_A_num_data_valid;
input  [9:0] s_page_A_fifo_cap;
input   s_page_A_full_n;
output   s_page_A_write;
output  [159:0] s_page_B_din;
input  [9:0] s_page_B_num_data_valid;
input  [9:0] s_page_B_fifo_cap;
input   s_page_B_full_n;
output   s_page_B_write;
input  [57:0] sext_ln29;
input  [57:0] sext_ln24_1;
input  [29:0] addr_per_page;
input  [31:0] sext_ln24;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg m_axi_gmem0_RREADY;
reg m_axi_gmem1_RREADY;
reg[159:0] s_page_A_din;
reg s_page_A_write;
reg[159:0] s_page_B_din;
reg s_page_B_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln29_reg_304;
reg    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] icmp_ln55_2_reg_316;
reg   [0:0] icmp_ln55_2_reg_316_pp0_iter1_reg;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage2;
reg   [0:0] icmp_ln55_reg_308;
reg    ap_predicate_op53_write_state3;
reg    ap_predicate_op54_write_state3;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_subdone;
reg    gmem1_blk_n_R;
wire    ap_block_pp0_stage1;
reg    gmem0_blk_n_R;
reg    s_page_A_blk_n;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln55_1_reg_312;
reg    s_page_B_blk_n;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln29_fu_158_p2;
wire   [0:0] icmp_ln55_fu_192_p2;
wire   [0:0] icmp_ln55_1_fu_204_p2;
wire   [0:0] icmp_ln55_2_fu_216_p2;
wire   [159:0] trunc_ln174_fu_239_p1;
reg   [159:0] trunc_ln174_reg_320;
reg    ap_block_pp0_stage1_11001;
wire   [159:0] trunc_ln174_1_fu_243_p1;
reg   [159:0] trunc_ln174_1_reg_325;
reg   [159:0] p_s_reg_330;
reg   [159:0] p_1_reg_335;
reg   [159:0] p_2_reg_340;
reg   [159:0] p_0_reg_345;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [29:0] i_fu_86;
wire   [29:0] add_ln29_fu_164_p2;
wire    ap_loop_init;
reg   [29:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage2_11001;
wire   [31:0] p_shl_fu_174_p3;
wire   [32:0] p_shl_cast_fu_182_p1;
wire   [32:0] zext_ln29_fu_170_p1;
wire   [32:0] empty_66_fu_186_p2;
wire  signed [32:0] sext_ln24_cast_fu_138_p1;
wire   [32:0] add_ln55_fu_198_p2;
wire   [32:0] add_ln55_1_fu_210_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_ext_blocking_cur_n;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

vadd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln29_fu_158_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_86 <= add_ln29_fu_164_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_86 <= 30'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln29_reg_304 <= icmp_ln29_fu_158_p2;
        icmp_ln55_2_reg_316_pp0_iter1_reg <= icmp_ln55_2_reg_316;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln55_1_reg_312 <= icmp_ln55_1_fu_204_p2;
        icmp_ln55_2_reg_316 <= icmp_ln55_2_fu_216_p2;
        icmp_ln55_reg_308 <= icmp_ln55_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_reg_304 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln55_2_reg_316 == 1'd1))) begin
        p_0_reg_345 <= {{m_axi_gmem1_RDATA[479:320]}};
        p_2_reg_340 <= {{m_axi_gmem0_RDATA[479:320]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_reg_304 == 1'd0) & (icmp_ln55_1_reg_312 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        p_1_reg_335 <= {{m_axi_gmem1_RDATA[319:160]}};
        p_s_reg_330 <= {{m_axi_gmem0_RDATA[319:160]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_reg_304 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_308 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        trunc_ln174_1_reg_325 <= trunc_ln174_1_fu_243_p1;
        trunc_ln174_reg_320 <= trunc_ln174_fu_239_p1;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_304 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 30'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_86;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_304 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_304 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_304 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_reg_304 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem1_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln55_1_reg_312 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op53_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage2)))) begin
        s_page_A_blk_n = s_page_A_full_n;
    end else begin
        s_page_A_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001) & (icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1))) begin
        s_page_A_din = p_2_reg_340;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln55_1_reg_312 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        s_page_A_din = p_s_reg_330;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op53_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        s_page_A_din = trunc_ln174_reg_320;
    end else begin
        s_page_A_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln55_1_reg_312 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op53_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        s_page_A_write = 1'b1;
    end else begin
        s_page_A_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln55_1_reg_312 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op54_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage2)))) begin
        s_page_B_blk_n = s_page_B_full_n;
    end else begin
        s_page_B_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001) & (icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1))) begin
        s_page_B_din = p_0_reg_345;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln55_1_reg_312 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        s_page_B_din = p_1_reg_335;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op54_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        s_page_B_din = trunc_ln174_1_reg_325;
    end else begin
        s_page_B_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln55_1_reg_312 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_predicate_op54_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        s_page_B_write = 1'b1;
    end else begin
        s_page_B_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_fu_164_p2 = (ap_sig_allocacmp_i_1 + 30'd1);

assign add_ln55_1_fu_210_p2 = (empty_66_fu_186_p2 + 33'd2);

assign add_ln55_fu_198_p2 = (empty_66_fu_186_p2 + 33'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln55_1_reg_312 == 1'd1) & (s_page_B_full_n == 1'b0)) | ((icmp_ln55_1_reg_312 == 1'd1) & (s_page_A_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln55_1_reg_312 == 1'd1) & (s_page_B_full_n == 1'b0)) | ((icmp_ln55_1_reg_312 == 1'd1) & (s_page_A_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln55_1_reg_312 == 1'd1) & (s_page_B_full_n == 1'b0)) | ((icmp_ln55_1_reg_312 == 1'd1) & (s_page_A_full_n == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((s_page_B_full_n == 1'b0) & (icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1)) | ((icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1) & (s_page_A_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln29_reg_304 == 1'd0) & (m_axi_gmem0_RVALID == 1'b0)) | ((icmp_ln29_reg_304 == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((s_page_B_full_n == 1'b0) & (icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1)) | ((icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1) & (s_page_A_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln29_reg_304 == 1'd0) & (m_axi_gmem0_RVALID == 1'b0)) | ((icmp_ln29_reg_304 == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((s_page_B_full_n == 1'b0) & (icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1)) | ((icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1) & (s_page_A_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln29_reg_304 == 1'd0) & (m_axi_gmem0_RVALID == 1'b0)) | ((icmp_ln29_reg_304 == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op54_write_state3 == 1'b1) & (s_page_B_full_n == 1'b0)) | ((ap_predicate_op53_write_state3 == 1'b1) & (s_page_A_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op54_write_state3 == 1'b1) & (s_page_B_full_n == 1'b0)) | ((ap_predicate_op53_write_state3 == 1'b1) & (s_page_A_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op54_write_state3 == 1'b1) & (s_page_B_full_n == 1'b0)) | ((ap_predicate_op53_write_state3 == 1'b1) & (s_page_A_full_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((icmp_ln29_reg_304 == 1'd0) & (m_axi_gmem0_RVALID == 1'b0)) | ((icmp_ln29_reg_304 == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = (((ap_predicate_op54_write_state3 == 1'b1) & (s_page_B_full_n == 1'b0)) | ((ap_predicate_op53_write_state3 == 1'b1) & (s_page_A_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln55_1_reg_312 == 1'd1) & (s_page_B_full_n == 1'b0)) | ((icmp_ln55_1_reg_312 == 1'd1) & (s_page_A_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = (((s_page_B_full_n == 1'b0) & (icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1)) | ((icmp_ln55_2_reg_316_pp0_iter1_reg == 1'd1) & (s_page_A_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_cur_n = (gmem1_blk_n_R & gmem0_blk_n_R);

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_cur_n = (s_page_B_blk_n & s_page_A_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

always @ (*) begin
    ap_predicate_op53_write_state3 = ((icmp_ln29_reg_304 == 1'd0) & (icmp_ln55_reg_308 == 1'd1));
end

always @ (*) begin
    ap_predicate_op54_write_state3 = ((icmp_ln29_reg_304 == 1'd0) & (icmp_ln55_reg_308 == 1'd1));
end

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign empty_66_fu_186_p2 = (p_shl_cast_fu_182_p1 - zext_ln29_fu_170_p1);

assign icmp_ln29_fu_158_p2 = ((ap_sig_allocacmp_i_1 == addr_per_page) ? 1'b1 : 1'b0);

assign icmp_ln55_1_fu_204_p2 = (($signed(add_ln55_fu_198_p2) < $signed(sext_ln24_cast_fu_138_p1)) ? 1'b1 : 1'b0);

assign icmp_ln55_2_fu_216_p2 = (($signed(add_ln55_1_fu_210_p2) < $signed(sext_ln24_cast_fu_138_p1)) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_192_p2 = (($signed(empty_66_fu_186_p2) < $signed(sext_ln24_cast_fu_138_p1)) ? 1'b1 : 1'b0);

assign m_axi_gmem0_ARADDR = 64'd0;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = 32'd0;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_ARVALID = 1'b0;

assign m_axi_gmem0_AWADDR = 64'd0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd0;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_AWVALID = 1'b0;

assign m_axi_gmem0_BREADY = 1'b0;

assign m_axi_gmem0_WDATA = 512'd0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 64'd0;

assign m_axi_gmem0_WUSER = 1'd0;

assign m_axi_gmem0_WVALID = 1'b0;

assign m_axi_gmem1_ARADDR = 64'd0;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = 32'd0;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_ARVALID = 1'b0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_WDATA = 512'd0;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 64'd0;

assign m_axi_gmem1_WUSER = 1'd0;

assign m_axi_gmem1_WVALID = 1'b0;

assign p_shl_cast_fu_182_p1 = p_shl_fu_174_p3;

assign p_shl_fu_174_p3 = {{ap_sig_allocacmp_i_1}, {2'd0}};

assign sext_ln24_cast_fu_138_p1 = $signed(sext_ln24);

assign trunc_ln174_1_fu_243_p1 = m_axi_gmem1_RDATA[159:0];

assign trunc_ln174_fu_239_p1 = m_axi_gmem0_RDATA[159:0];

assign zext_ln29_fu_170_p1 = ap_sig_allocacmp_i_1;

endmodule //vadd_input_loader_Pipeline_VITIS_LOOP_29_3
