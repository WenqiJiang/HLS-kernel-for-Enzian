// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vadd_insert_wrapper_22_Pipeline_VITIS_LOOP_55_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_intermediate_result_with_offset_i_1_din,
        s_intermediate_result_with_offset_i_1_num_data_valid,
        s_intermediate_result_with_offset_i_1_fifo_cap,
        s_intermediate_result_with_offset_i_1_full_n,
        s_intermediate_result_with_offset_i_1_write,
        queue_cell_ID_981_reload,
        queue_cell_ID_980_reload,
        queue_cell_ID_979_reload,
        queue_cell_ID_978_reload,
        queue_cell_ID_977_reload,
        queue_cell_ID_976_reload,
        queue_cell_ID_975_reload,
        queue_cell_ID_974_reload,
        queue_cell_ID_973_reload,
        queue_cell_ID_972_reload,
        queue_cell_ID_971_reload,
        queue_cell_ID_970_reload,
        queue_cell_ID_969_reload,
        queue_cell_ID_968_reload,
        queue_cell_ID_967_reload,
        queue_cell_ID_966_reload,
        queue_cell_ID_965_reload,
        queue_cell_ID_964_reload,
        queue_cell_ID_963_reload,
        queue_cell_ID_962_reload,
        queue_cell_ID_961_reload,
        queue_cell_ID_960_reload,
        queue_cell_ID_959_reload,
        queue_cell_ID_958_reload,
        queue_cell_ID_957_reload,
        queue_cell_ID_956_reload,
        queue_cell_ID_955_reload,
        queue_cell_ID_954_reload,
        queue_cell_ID_953_reload,
        queue_cell_ID_952_reload,
        queue_cell_ID_951_reload,
        queue_cell_ID_950_reload,
        queue_cell_ID_949_reload,
        queue_cell_ID_948_reload,
        queue_cell_ID_947_reload,
        queue_cell_ID_946_reload,
        queue_cell_ID_945_reload,
        queue_cell_ID_944_reload,
        queue_offset_981_reload,
        queue_offset_980_reload,
        queue_offset_979_reload,
        queue_offset_978_reload,
        queue_offset_977_reload,
        queue_offset_976_reload,
        queue_offset_975_reload,
        queue_offset_974_reload,
        queue_offset_973_reload,
        queue_offset_972_reload,
        queue_offset_971_reload,
        queue_offset_970_reload,
        queue_offset_969_reload,
        queue_offset_968_reload,
        queue_offset_967_reload,
        queue_offset_966_reload,
        queue_offset_965_reload,
        queue_offset_964_reload,
        queue_offset_963_reload,
        queue_offset_962_reload,
        queue_offset_961_reload,
        queue_offset_960_reload,
        queue_offset_959_reload,
        queue_offset_958_reload,
        queue_offset_957_reload,
        queue_offset_956_reload,
        queue_offset_955_reload,
        queue_offset_954_reload,
        queue_offset_953_reload,
        queue_offset_952_reload,
        queue_offset_951_reload,
        queue_offset_950_reload,
        queue_offset_949_reload,
        queue_offset_948_reload,
        queue_offset_947_reload,
        queue_offset_946_reload,
        queue_offset_945_reload,
        queue_offset_944_reload,
        queue_dist_1385_reload,
        queue_dist_1384_reload,
        queue_dist_1383_reload,
        queue_dist_1382_reload,
        queue_dist_1381_reload,
        queue_dist_1380_reload,
        queue_dist_1379_reload,
        queue_dist_1378_reload,
        queue_dist_1377_reload,
        queue_dist_1376_reload,
        queue_dist_1375_reload,
        queue_dist_1374_reload,
        queue_dist_1373_reload,
        queue_dist_1372_reload,
        queue_dist_1371_reload,
        queue_dist_1370_reload,
        queue_dist_1369_reload,
        queue_dist_1368_reload,
        queue_dist_1367_reload,
        queue_dist_1366_reload,
        queue_dist_1365_reload,
        queue_dist_1364_reload,
        queue_dist_1363_reload,
        queue_dist_1362_reload,
        queue_dist_1361_reload,
        queue_dist_1360_reload,
        queue_dist_1359_reload,
        queue_dist_1358_reload,
        queue_dist_1357_reload,
        queue_dist_1356_reload,
        queue_dist_1355_reload,
        queue_dist_1354_reload,
        queue_dist_1353_reload,
        queue_dist_1352_reload,
        queue_dist_1351_reload,
        queue_dist_reload,
        queue_dist_1386_reload,
        queue_dist_1387_reload,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [95:0] s_intermediate_result_with_offset_i_1_din;
input  [3:0] s_intermediate_result_with_offset_i_1_num_data_valid;
input  [3:0] s_intermediate_result_with_offset_i_1_fifo_cap;
input   s_intermediate_result_with_offset_i_1_full_n;
output   s_intermediate_result_with_offset_i_1_write;
input  [31:0] queue_cell_ID_981_reload;
input  [31:0] queue_cell_ID_980_reload;
input  [31:0] queue_cell_ID_979_reload;
input  [31:0] queue_cell_ID_978_reload;
input  [31:0] queue_cell_ID_977_reload;
input  [31:0] queue_cell_ID_976_reload;
input  [31:0] queue_cell_ID_975_reload;
input  [31:0] queue_cell_ID_974_reload;
input  [31:0] queue_cell_ID_973_reload;
input  [31:0] queue_cell_ID_972_reload;
input  [31:0] queue_cell_ID_971_reload;
input  [31:0] queue_cell_ID_970_reload;
input  [31:0] queue_cell_ID_969_reload;
input  [31:0] queue_cell_ID_968_reload;
input  [31:0] queue_cell_ID_967_reload;
input  [31:0] queue_cell_ID_966_reload;
input  [31:0] queue_cell_ID_965_reload;
input  [31:0] queue_cell_ID_964_reload;
input  [31:0] queue_cell_ID_963_reload;
input  [31:0] queue_cell_ID_962_reload;
input  [31:0] queue_cell_ID_961_reload;
input  [31:0] queue_cell_ID_960_reload;
input  [31:0] queue_cell_ID_959_reload;
input  [31:0] queue_cell_ID_958_reload;
input  [31:0] queue_cell_ID_957_reload;
input  [31:0] queue_cell_ID_956_reload;
input  [31:0] queue_cell_ID_955_reload;
input  [31:0] queue_cell_ID_954_reload;
input  [31:0] queue_cell_ID_953_reload;
input  [31:0] queue_cell_ID_952_reload;
input  [31:0] queue_cell_ID_951_reload;
input  [31:0] queue_cell_ID_950_reload;
input  [31:0] queue_cell_ID_949_reload;
input  [31:0] queue_cell_ID_948_reload;
input  [31:0] queue_cell_ID_947_reload;
input  [31:0] queue_cell_ID_946_reload;
input  [31:0] queue_cell_ID_945_reload;
input  [31:0] queue_cell_ID_944_reload;
input  [31:0] queue_offset_981_reload;
input  [31:0] queue_offset_980_reload;
input  [31:0] queue_offset_979_reload;
input  [31:0] queue_offset_978_reload;
input  [31:0] queue_offset_977_reload;
input  [31:0] queue_offset_976_reload;
input  [31:0] queue_offset_975_reload;
input  [31:0] queue_offset_974_reload;
input  [31:0] queue_offset_973_reload;
input  [31:0] queue_offset_972_reload;
input  [31:0] queue_offset_971_reload;
input  [31:0] queue_offset_970_reload;
input  [31:0] queue_offset_969_reload;
input  [31:0] queue_offset_968_reload;
input  [31:0] queue_offset_967_reload;
input  [31:0] queue_offset_966_reload;
input  [31:0] queue_offset_965_reload;
input  [31:0] queue_offset_964_reload;
input  [31:0] queue_offset_963_reload;
input  [31:0] queue_offset_962_reload;
input  [31:0] queue_offset_961_reload;
input  [31:0] queue_offset_960_reload;
input  [31:0] queue_offset_959_reload;
input  [31:0] queue_offset_958_reload;
input  [31:0] queue_offset_957_reload;
input  [31:0] queue_offset_956_reload;
input  [31:0] queue_offset_955_reload;
input  [31:0] queue_offset_954_reload;
input  [31:0] queue_offset_953_reload;
input  [31:0] queue_offset_952_reload;
input  [31:0] queue_offset_951_reload;
input  [31:0] queue_offset_950_reload;
input  [31:0] queue_offset_949_reload;
input  [31:0] queue_offset_948_reload;
input  [31:0] queue_offset_947_reload;
input  [31:0] queue_offset_946_reload;
input  [31:0] queue_offset_945_reload;
input  [31:0] queue_offset_944_reload;
input  [31:0] queue_dist_1385_reload;
input  [31:0] queue_dist_1384_reload;
input  [31:0] queue_dist_1383_reload;
input  [31:0] queue_dist_1382_reload;
input  [31:0] queue_dist_1381_reload;
input  [31:0] queue_dist_1380_reload;
input  [31:0] queue_dist_1379_reload;
input  [31:0] queue_dist_1378_reload;
input  [31:0] queue_dist_1377_reload;
input  [31:0] queue_dist_1376_reload;
input  [31:0] queue_dist_1375_reload;
input  [31:0] queue_dist_1374_reload;
input  [31:0] queue_dist_1373_reload;
input  [31:0] queue_dist_1372_reload;
input  [31:0] queue_dist_1371_reload;
input  [31:0] queue_dist_1370_reload;
input  [31:0] queue_dist_1369_reload;
input  [31:0] queue_dist_1368_reload;
input  [31:0] queue_dist_1367_reload;
input  [31:0] queue_dist_1366_reload;
input  [31:0] queue_dist_1365_reload;
input  [31:0] queue_dist_1364_reload;
input  [31:0] queue_dist_1363_reload;
input  [31:0] queue_dist_1362_reload;
input  [31:0] queue_dist_1361_reload;
input  [31:0] queue_dist_1360_reload;
input  [31:0] queue_dist_1359_reload;
input  [31:0] queue_dist_1358_reload;
input  [31:0] queue_dist_1357_reload;
input  [31:0] queue_dist_1356_reload;
input  [31:0] queue_dist_1355_reload;
input  [31:0] queue_dist_1354_reload;
input  [31:0] queue_dist_1353_reload;
input  [31:0] queue_dist_1352_reload;
input  [31:0] queue_dist_1351_reload;
input  [31:0] queue_dist_reload;
input  [31:0] queue_dist_1386_reload;
input  [31:0] queue_dist_1387_reload;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg s_intermediate_result_with_offset_i_1_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln55_fu_975_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    s_intermediate_result_with_offset_i_1_blk_n;
wire    ap_block_pp0_stage0;
wire   [31:0] tmp_fu_981_p41;
reg   [31:0] tmp_reg_1266;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] tmp_s_fu_1065_p41;
reg   [31:0] tmp_s_reg_1271;
wire   [31:0] tmp_6_fu_1149_p41;
reg   [31:0] tmp_6_reg_1276;
reg   [5:0] i_fu_272;
wire   [5:0] add_ln55_fu_1233_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_14;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln174_fu_1244_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U5537(
    .din0(32'd0),
    .din1(queue_cell_ID_981_reload),
    .din2(queue_cell_ID_980_reload),
    .din3(queue_cell_ID_979_reload),
    .din4(queue_cell_ID_978_reload),
    .din5(queue_cell_ID_977_reload),
    .din6(queue_cell_ID_976_reload),
    .din7(queue_cell_ID_975_reload),
    .din8(queue_cell_ID_974_reload),
    .din9(queue_cell_ID_973_reload),
    .din10(queue_cell_ID_972_reload),
    .din11(queue_cell_ID_971_reload),
    .din12(queue_cell_ID_970_reload),
    .din13(queue_cell_ID_969_reload),
    .din14(queue_cell_ID_968_reload),
    .din15(queue_cell_ID_967_reload),
    .din16(queue_cell_ID_966_reload),
    .din17(queue_cell_ID_965_reload),
    .din18(queue_cell_ID_964_reload),
    .din19(queue_cell_ID_963_reload),
    .din20(queue_cell_ID_962_reload),
    .din21(queue_cell_ID_961_reload),
    .din22(queue_cell_ID_960_reload),
    .din23(queue_cell_ID_959_reload),
    .din24(queue_cell_ID_958_reload),
    .din25(queue_cell_ID_957_reload),
    .din26(queue_cell_ID_956_reload),
    .din27(queue_cell_ID_955_reload),
    .din28(queue_cell_ID_954_reload),
    .din29(queue_cell_ID_953_reload),
    .din30(queue_cell_ID_952_reload),
    .din31(queue_cell_ID_951_reload),
    .din32(queue_cell_ID_950_reload),
    .din33(queue_cell_ID_949_reload),
    .din34(queue_cell_ID_948_reload),
    .din35(queue_cell_ID_947_reload),
    .din36(queue_cell_ID_946_reload),
    .din37(queue_cell_ID_945_reload),
    .din38(queue_cell_ID_944_reload),
    .din39(ap_sig_allocacmp_i_14),
    .dout(tmp_fu_981_p41)
);

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U5538(
    .din0(32'd0),
    .din1(queue_offset_981_reload),
    .din2(queue_offset_980_reload),
    .din3(queue_offset_979_reload),
    .din4(queue_offset_978_reload),
    .din5(queue_offset_977_reload),
    .din6(queue_offset_976_reload),
    .din7(queue_offset_975_reload),
    .din8(queue_offset_974_reload),
    .din9(queue_offset_973_reload),
    .din10(queue_offset_972_reload),
    .din11(queue_offset_971_reload),
    .din12(queue_offset_970_reload),
    .din13(queue_offset_969_reload),
    .din14(queue_offset_968_reload),
    .din15(queue_offset_967_reload),
    .din16(queue_offset_966_reload),
    .din17(queue_offset_965_reload),
    .din18(queue_offset_964_reload),
    .din19(queue_offset_963_reload),
    .din20(queue_offset_962_reload),
    .din21(queue_offset_961_reload),
    .din22(queue_offset_960_reload),
    .din23(queue_offset_959_reload),
    .din24(queue_offset_958_reload),
    .din25(queue_offset_957_reload),
    .din26(queue_offset_956_reload),
    .din27(queue_offset_955_reload),
    .din28(queue_offset_954_reload),
    .din29(queue_offset_953_reload),
    .din30(queue_offset_952_reload),
    .din31(queue_offset_951_reload),
    .din32(queue_offset_950_reload),
    .din33(queue_offset_949_reload),
    .din34(queue_offset_948_reload),
    .din35(queue_offset_947_reload),
    .din36(queue_offset_946_reload),
    .din37(queue_offset_945_reload),
    .din38(queue_offset_944_reload),
    .din39(ap_sig_allocacmp_i_14),
    .dout(tmp_s_fu_1065_p41)
);

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U5539(
    .din0(32'd0),
    .din1(queue_dist_1385_reload),
    .din2(queue_dist_1384_reload),
    .din3(queue_dist_1383_reload),
    .din4(queue_dist_1382_reload),
    .din5(queue_dist_1381_reload),
    .din6(queue_dist_1380_reload),
    .din7(queue_dist_1379_reload),
    .din8(queue_dist_1378_reload),
    .din9(queue_dist_1377_reload),
    .din10(queue_dist_1376_reload),
    .din11(queue_dist_1375_reload),
    .din12(queue_dist_1374_reload),
    .din13(queue_dist_1373_reload),
    .din14(queue_dist_1372_reload),
    .din15(queue_dist_1371_reload),
    .din16(queue_dist_1370_reload),
    .din17(queue_dist_1369_reload),
    .din18(queue_dist_1368_reload),
    .din19(queue_dist_1367_reload),
    .din20(queue_dist_1366_reload),
    .din21(queue_dist_1365_reload),
    .din22(queue_dist_1364_reload),
    .din23(queue_dist_1363_reload),
    .din24(queue_dist_1362_reload),
    .din25(queue_dist_1361_reload),
    .din26(queue_dist_1360_reload),
    .din27(queue_dist_1359_reload),
    .din28(queue_dist_1358_reload),
    .din29(queue_dist_1357_reload),
    .din30(queue_dist_1356_reload),
    .din31(queue_dist_1355_reload),
    .din32(queue_dist_1354_reload),
    .din33(queue_dist_1353_reload),
    .din34(queue_dist_1352_reload),
    .din35(queue_dist_1351_reload),
    .din36(queue_dist_reload),
    .din37(queue_dist_1386_reload),
    .din38(queue_dist_1387_reload),
    .din39(ap_sig_allocacmp_i_14),
    .dout(tmp_6_fu_1149_p41)
);

vadd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln55_fu_975_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_272 <= add_ln55_fu_1233_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_272 <= 6'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_975_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_6_reg_1276 <= tmp_6_fu_1149_p41;
        tmp_reg_1266 <= tmp_fu_981_p41;
        tmp_s_reg_1271 <= tmp_s_fu_1065_p41;
    end
end

always @ (*) begin
    if (((icmp_ln55_fu_975_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_14 = 6'd1;
    end else begin
        ap_sig_allocacmp_i_14 = i_fu_272;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_intermediate_result_with_offset_i_1_blk_n = s_intermediate_result_with_offset_i_1_full_n;
    end else begin
        s_intermediate_result_with_offset_i_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_intermediate_result_with_offset_i_1_write = 1'b1;
    end else begin
        s_intermediate_result_with_offset_i_1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_1233_p2 = (ap_sig_allocacmp_i_14 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((s_intermediate_result_with_offset_i_1_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((s_intermediate_result_with_offset_i_1_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((s_intermediate_result_with_offset_i_1_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (s_intermediate_result_with_offset_i_1_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = s_intermediate_result_with_offset_i_1_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bitcast_ln174_fu_1244_p1 = tmp_6_reg_1276;

assign icmp_ln55_fu_975_p2 = ((ap_sig_allocacmp_i_14 == 6'd39) ? 1'b1 : 1'b0);

assign s_intermediate_result_with_offset_i_1_din = {{{bitcast_ln174_fu_1244_p1}, {tmp_s_reg_1271}}, {tmp_reg_1266}};

endmodule //vadd_insert_wrapper_22_Pipeline_VITIS_LOOP_55_4
