// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vadd_get_cell_addr_and_size_Pipeline_VITIS_LOOP_76_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_cell_ID_get_cell_addr_and_size73_dout,
        s_cell_ID_get_cell_addr_and_size73_num_data_valid,
        s_cell_ID_get_cell_addr_and_size73_fifo_cap,
        s_cell_ID_get_cell_addr_and_size73_empty_n,
        s_cell_ID_get_cell_addr_and_size73_read,
        s_scanned_entries_every_cell75_din,
        s_scanned_entries_every_cell75_num_data_valid,
        s_scanned_entries_every_cell75_fifo_cap,
        s_scanned_entries_every_cell75_full_n,
        s_scanned_entries_every_cell75_write,
        s_last_valid_PE_ID76_din,
        s_last_valid_PE_ID76_num_data_valid,
        s_last_valid_PE_ID76_fifo_cap,
        s_last_valid_PE_ID76_full_n,
        s_last_valid_PE_ID76_write,
        s_start_addr_every_cell77_din,
        s_start_addr_every_cell77_num_data_valid,
        s_start_addr_every_cell77_fifo_cap,
        s_start_addr_every_cell77_full_n,
        s_start_addr_every_cell77_write,
        nprobe_load,
        cell_ID_to_num_vecs_address0,
        cell_ID_to_num_vecs_ce0,
        cell_ID_to_num_vecs_q0,
        cell_ID_to_addr_address0,
        cell_ID_to_addr_ce0,
        cell_ID_to_addr_q0,
        iter_num_per_query_out,
        iter_num_per_query_out_ap_vld,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] s_cell_ID_get_cell_addr_and_size73_dout;
input  [8:0] s_cell_ID_get_cell_addr_and_size73_num_data_valid;
input  [8:0] s_cell_ID_get_cell_addr_and_size73_fifo_cap;
input   s_cell_ID_get_cell_addr_and_size73_empty_n;
output   s_cell_ID_get_cell_addr_and_size73_read;
output  [31:0] s_scanned_entries_every_cell75_din;
input  [8:0] s_scanned_entries_every_cell75_num_data_valid;
input  [8:0] s_scanned_entries_every_cell75_fifo_cap;
input   s_scanned_entries_every_cell75_full_n;
output   s_scanned_entries_every_cell75_write;
output  [31:0] s_last_valid_PE_ID76_din;
input  [8:0] s_last_valid_PE_ID76_num_data_valid;
input  [8:0] s_last_valid_PE_ID76_fifo_cap;
input   s_last_valid_PE_ID76_full_n;
output   s_last_valid_PE_ID76_write;
output  [31:0] s_start_addr_every_cell77_din;
input  [8:0] s_start_addr_every_cell77_num_data_valid;
input  [8:0] s_start_addr_every_cell77_fifo_cap;
input   s_start_addr_every_cell77_full_n;
output   s_start_addr_every_cell77_write;
input  [31:0] nprobe_load;
output  [15:0] cell_ID_to_num_vecs_address0;
output   cell_ID_to_num_vecs_ce0;
input  [31:0] cell_ID_to_num_vecs_q0;
output  [15:0] cell_ID_to_addr_address0;
output   cell_ID_to_addr_ce0;
input  [31:0] cell_ID_to_addr_q0;
output  [31:0] iter_num_per_query_out;
output   iter_num_per_query_out_ap_vld;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg s_cell_ID_get_cell_addr_and_size73_read;
reg s_scanned_entries_every_cell75_write;
reg s_last_valid_PE_ID76_write;
reg s_start_addr_every_cell77_write;
reg cell_ID_to_num_vecs_ce0;
reg cell_ID_to_addr_ce0;
reg iter_num_per_query_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln76_fu_168_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    s_cell_ID_get_cell_addr_and_size73_blk_n;
wire    ap_block_pp0_stage0;
reg    s_scanned_entries_every_cell75_blk_n;
reg    s_last_valid_PE_ID76_blk_n;
reg    s_start_addr_every_cell77_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln76_reg_358;
reg   [0:0] icmp_ln76_reg_358_pp0_iter1_reg;
wire   [63:0] zext_ln79_fu_185_p1;
reg   [63:0] zext_ln79_reg_362;
wire   [2:0] select_ln83_fu_234_p3;
reg   [2:0] select_ln83_reg_372;
wire   [30:0] select_ln88_fu_276_p3;
reg   [30:0] select_ln88_reg_378;
reg   [31:0] iter_num_per_query_fu_76;
wire   [31:0] iter_num_per_query_1_fu_328_p2;
wire    ap_loop_init;
reg   [30:0] nprobe_id_fu_80;
wire   [30:0] nprobe_id_5_fu_174_p2;
reg   [30:0] ap_sig_allocacmp_nprobe_id_load;
wire   [31:0] scanned_entries_every_cell_1_fu_306_p3;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] nprobe_id_cast_fu_164_p1;
wire   [31:0] sub_ln83_fu_202_p2;
wire   [1:0] trunc_ln83_1_fu_208_p1;
wire   [2:0] p_and_t_fu_212_p3;
wire   [1:0] trunc_ln83_fu_198_p1;
wire   [0:0] tmp_fu_190_p3;
wire   [2:0] sub_ln83_1_fu_220_p2;
wire   [2:0] tmp_s_fu_226_p3;
wire   [29:0] trunc_ln88_1_fu_242_p4;
wire   [30:0] zext_ln88_fu_252_p1;
wire   [29:0] trunc_ln88_2_fu_262_p4;
wire   [30:0] sub_ln88_fu_256_p2;
wire   [30:0] zext_ln88_1_fu_272_p1;
wire  signed [31:0] sext_ln88_fu_292_p1;
wire   [0:0] icmp_ln83_fu_287_p2;
wire   [31:0] scanned_entries_every_cell_fu_295_p2;
wire   [2:0] last_valid_PE_ID_fu_301_p2;
wire   [2:0] last_valid_PE_ID_1_fu_315_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

vadd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            iter_num_per_query_fu_76 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            iter_num_per_query_fu_76 <= iter_num_per_query_1_fu_328_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln76_fu_168_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            nprobe_id_fu_80 <= nprobe_id_5_fu_174_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            nprobe_id_fu_80 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln76_reg_358 <= icmp_ln76_fu_168_p2;
        icmp_ln76_reg_358_pp0_iter1_reg <= icmp_ln76_reg_358;
        zext_ln79_reg_362[31 : 0] <= zext_ln79_fu_185_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        select_ln83_reg_372 <= select_ln83_fu_234_p3;
        select_ln88_reg_378 <= select_ln88_fu_276_p3;
    end
end

always @ (*) begin
    if (((icmp_ln76_fu_168_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_nprobe_id_load = 31'd0;
    end else begin
        ap_sig_allocacmp_nprobe_id_load = nprobe_id_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cell_ID_to_addr_ce0 = 1'b1;
    end else begin
        cell_ID_to_addr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cell_ID_to_num_vecs_ce0 = 1'b1;
    end else begin
        cell_ID_to_num_vecs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln76_reg_358_pp0_iter1_reg == 1'd0))) begin
        iter_num_per_query_out_ap_vld = 1'b1;
    end else begin
        iter_num_per_query_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_cell_ID_get_cell_addr_and_size73_blk_n = s_cell_ID_get_cell_addr_and_size73_empty_n;
    end else begin
        s_cell_ID_get_cell_addr_and_size73_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_cell_ID_get_cell_addr_and_size73_read = 1'b1;
    end else begin
        s_cell_ID_get_cell_addr_and_size73_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        s_last_valid_PE_ID76_blk_n = s_last_valid_PE_ID76_full_n;
    end else begin
        s_last_valid_PE_ID76_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        s_last_valid_PE_ID76_write = 1'b1;
    end else begin
        s_last_valid_PE_ID76_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        s_scanned_entries_every_cell75_blk_n = s_scanned_entries_every_cell75_full_n;
    end else begin
        s_scanned_entries_every_cell75_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        s_scanned_entries_every_cell75_write = 1'b1;
    end else begin
        s_scanned_entries_every_cell75_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        s_start_addr_every_cell77_blk_n = s_start_addr_every_cell77_full_n;
    end else begin
        s_start_addr_every_cell77_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        s_start_addr_every_cell77_write = 1'b1;
    end else begin
        s_start_addr_every_cell77_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((s_start_addr_every_cell77_full_n == 1'b0) | (s_last_valid_PE_ID76_full_n == 1'b0) | (s_scanned_entries_every_cell75_full_n == 1'b0))) | ((s_cell_ID_get_cell_addr_and_size73_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((s_start_addr_every_cell77_full_n == 1'b0) | (s_last_valid_PE_ID76_full_n == 1'b0) | (s_scanned_entries_every_cell75_full_n == 1'b0))) | ((s_cell_ID_get_cell_addr_and_size73_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((s_start_addr_every_cell77_full_n == 1'b0) | (s_last_valid_PE_ID76_full_n == 1'b0) | (s_scanned_entries_every_cell75_full_n == 1'b0))) | ((s_cell_ID_get_cell_addr_and_size73_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (s_cell_ID_get_cell_addr_and_size73_empty_n == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((s_start_addr_every_cell77_full_n == 1'b0) | (s_last_valid_PE_ID76_full_n == 1'b0) | (s_scanned_entries_every_cell75_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (s_start_addr_every_cell77_blk_n & s_scanned_entries_every_cell75_blk_n & s_last_valid_PE_ID76_blk_n & s_cell_ID_get_cell_addr_and_size73_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign cell_ID_to_addr_address0 = zext_ln79_reg_362;

assign cell_ID_to_num_vecs_address0 = zext_ln79_fu_185_p1;

assign icmp_ln76_fu_168_p2 = (($signed(nprobe_id_cast_fu_164_p1) < $signed(nprobe_load)) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_287_p2 = ((select_ln83_reg_372 == 3'd0) ? 1'b1 : 1'b0);

assign iter_num_per_query_1_fu_328_p2 = (scanned_entries_every_cell_1_fu_306_p3 + iter_num_per_query_fu_76);

assign iter_num_per_query_out = iter_num_per_query_fu_76;

assign last_valid_PE_ID_1_fu_315_p3 = ((icmp_ln83_fu_287_p2[0:0] == 1'b1) ? 3'd3 : last_valid_PE_ID_fu_301_p2);

assign last_valid_PE_ID_fu_301_p2 = ($signed(select_ln83_reg_372) + $signed(3'd7));

assign nprobe_id_5_fu_174_p2 = (ap_sig_allocacmp_nprobe_id_load + 31'd1);

assign nprobe_id_cast_fu_164_p1 = ap_sig_allocacmp_nprobe_id_load;

assign p_and_t_fu_212_p3 = {{1'd0}, {trunc_ln83_1_fu_208_p1}};

assign s_last_valid_PE_ID76_din = $signed(last_valid_PE_ID_1_fu_315_p3);

assign s_scanned_entries_every_cell75_din = scanned_entries_every_cell_1_fu_306_p3;

assign s_start_addr_every_cell77_din = cell_ID_to_addr_q0;

assign scanned_entries_every_cell_1_fu_306_p3 = ((icmp_ln83_fu_287_p2[0:0] == 1'b1) ? sext_ln88_fu_292_p1 : scanned_entries_every_cell_fu_295_p2);

assign scanned_entries_every_cell_fu_295_p2 = ($signed(sext_ln88_fu_292_p1) + $signed(32'd1));

assign select_ln83_fu_234_p3 = ((tmp_fu_190_p3[0:0] == 1'b1) ? sub_ln83_1_fu_220_p2 : tmp_s_fu_226_p3);

assign select_ln88_fu_276_p3 = ((tmp_fu_190_p3[0:0] == 1'b1) ? sub_ln88_fu_256_p2 : zext_ln88_1_fu_272_p1);

assign sext_ln88_fu_292_p1 = $signed(select_ln88_reg_378);

assign sub_ln83_1_fu_220_p2 = (3'd0 - p_and_t_fu_212_p3);

assign sub_ln83_fu_202_p2 = (32'd0 - cell_ID_to_num_vecs_q0);

assign sub_ln88_fu_256_p2 = (31'd0 - zext_ln88_fu_252_p1);

assign tmp_fu_190_p3 = cell_ID_to_num_vecs_q0[32'd31];

assign tmp_s_fu_226_p3 = {{1'd0}, {trunc_ln83_fu_198_p1}};

assign trunc_ln83_1_fu_208_p1 = sub_ln83_fu_202_p2[1:0];

assign trunc_ln83_fu_198_p1 = cell_ID_to_num_vecs_q0[1:0];

assign trunc_ln88_1_fu_242_p4 = {{sub_ln83_fu_202_p2[31:2]}};

assign trunc_ln88_2_fu_262_p4 = {{cell_ID_to_num_vecs_q0[31:2]}};

assign zext_ln79_fu_185_p1 = s_cell_ID_get_cell_addr_and_size73_dout;

assign zext_ln88_1_fu_272_p1 = trunc_ln88_2_fu_262_p4;

assign zext_ln88_fu_252_p1 = trunc_ln88_1_fu_242_p4;

always @ (posedge ap_clk) begin
    zext_ln79_reg_362[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //vadd_get_cell_addr_and_size_Pipeline_VITIS_LOOP_76_3
