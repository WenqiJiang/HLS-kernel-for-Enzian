// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vadd_insert_wrapper_28_Pipeline_VITIS_LOOP_55_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_intermediate_result_with_offset_i_7_din,
        s_intermediate_result_with_offset_i_7_num_data_valid,
        s_intermediate_result_with_offset_i_7_fifo_cap,
        s_intermediate_result_with_offset_i_7_full_n,
        s_intermediate_result_with_offset_i_7_write,
        queue_cell_ID_75_reload,
        queue_cell_ID_74_reload,
        queue_cell_ID_73_reload,
        queue_cell_ID_72_reload,
        queue_cell_ID_71_reload,
        queue_cell_ID_70_reload,
        queue_cell_ID_69_reload,
        queue_cell_ID_68_reload,
        queue_cell_ID_67_reload,
        queue_cell_ID_66_reload,
        queue_cell_ID_65_reload,
        queue_cell_ID_64_reload,
        queue_cell_ID_63_reload,
        queue_cell_ID_62_reload,
        queue_cell_ID_61_reload,
        queue_cell_ID_60_reload,
        queue_cell_ID_59_reload,
        queue_cell_ID_58_reload,
        queue_cell_ID_57_reload,
        queue_cell_ID_56_reload,
        queue_cell_ID_55_reload,
        queue_cell_ID_54_reload,
        queue_cell_ID_53_reload,
        queue_cell_ID_52_reload,
        queue_cell_ID_51_reload,
        queue_cell_ID_50_reload,
        queue_cell_ID_49_reload,
        queue_cell_ID_48_reload,
        queue_cell_ID_47_reload,
        queue_cell_ID_46_reload,
        queue_cell_ID_45_reload,
        queue_cell_ID_44_reload,
        queue_cell_ID_43_reload,
        queue_cell_ID_42_reload,
        queue_cell_ID_41_reload,
        queue_cell_ID_40_reload,
        queue_cell_ID_39_reload,
        queue_cell_ID_38_reload,
        queue_offset_75_reload,
        queue_offset_74_reload,
        queue_offset_73_reload,
        queue_offset_72_reload,
        queue_offset_71_reload,
        queue_offset_70_reload,
        queue_offset_69_reload,
        queue_offset_68_reload,
        queue_offset_67_reload,
        queue_offset_66_reload,
        queue_offset_65_reload,
        queue_offset_64_reload,
        queue_offset_63_reload,
        queue_offset_62_reload,
        queue_offset_61_reload,
        queue_offset_60_reload,
        queue_offset_59_reload,
        queue_offset_58_reload,
        queue_offset_57_reload,
        queue_offset_56_reload,
        queue_offset_55_reload,
        queue_offset_54_reload,
        queue_offset_53_reload,
        queue_offset_52_reload,
        queue_offset_51_reload,
        queue_offset_50_reload,
        queue_offset_49_reload,
        queue_offset_48_reload,
        queue_offset_47_reload,
        queue_offset_46_reload,
        queue_offset_45_reload,
        queue_offset_44_reload,
        queue_offset_43_reload,
        queue_offset_42_reload,
        queue_offset_41_reload,
        queue_offset_40_reload,
        queue_offset_39_reload,
        queue_offset_38_reload,
        queue_dist_35_reload,
        queue_dist_34_reload,
        queue_dist_33_reload,
        queue_dist_32_reload,
        queue_dist_31_reload,
        queue_dist_30_reload,
        queue_dist_29_reload,
        queue_dist_28_reload,
        queue_dist_27_reload,
        queue_dist_26_reload,
        queue_dist_25_reload,
        queue_dist_24_reload,
        queue_dist_23_reload,
        queue_dist_22_reload,
        queue_dist_21_reload,
        queue_dist_20_reload,
        queue_dist_19_reload,
        queue_dist_18_reload,
        queue_dist_17_reload,
        queue_dist_16_reload,
        queue_dist_15_reload,
        queue_dist_14_reload,
        queue_dist_13_reload,
        queue_dist_12_reload,
        queue_dist_11_reload,
        queue_dist_10_reload,
        queue_dist_9_reload,
        queue_dist_8_reload,
        queue_dist_7_reload,
        queue_dist_6_reload,
        queue_dist_5_reload,
        queue_dist_4_reload,
        queue_dist_3_reload,
        queue_dist_2_reload,
        queue_dist_1_reload,
        queue_dist_reload,
        queue_dist_36_reload,
        queue_dist_37_reload,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [95:0] s_intermediate_result_with_offset_i_7_din;
input  [3:0] s_intermediate_result_with_offset_i_7_num_data_valid;
input  [3:0] s_intermediate_result_with_offset_i_7_fifo_cap;
input   s_intermediate_result_with_offset_i_7_full_n;
output   s_intermediate_result_with_offset_i_7_write;
input  [31:0] queue_cell_ID_75_reload;
input  [31:0] queue_cell_ID_74_reload;
input  [31:0] queue_cell_ID_73_reload;
input  [31:0] queue_cell_ID_72_reload;
input  [31:0] queue_cell_ID_71_reload;
input  [31:0] queue_cell_ID_70_reload;
input  [31:0] queue_cell_ID_69_reload;
input  [31:0] queue_cell_ID_68_reload;
input  [31:0] queue_cell_ID_67_reload;
input  [31:0] queue_cell_ID_66_reload;
input  [31:0] queue_cell_ID_65_reload;
input  [31:0] queue_cell_ID_64_reload;
input  [31:0] queue_cell_ID_63_reload;
input  [31:0] queue_cell_ID_62_reload;
input  [31:0] queue_cell_ID_61_reload;
input  [31:0] queue_cell_ID_60_reload;
input  [31:0] queue_cell_ID_59_reload;
input  [31:0] queue_cell_ID_58_reload;
input  [31:0] queue_cell_ID_57_reload;
input  [31:0] queue_cell_ID_56_reload;
input  [31:0] queue_cell_ID_55_reload;
input  [31:0] queue_cell_ID_54_reload;
input  [31:0] queue_cell_ID_53_reload;
input  [31:0] queue_cell_ID_52_reload;
input  [31:0] queue_cell_ID_51_reload;
input  [31:0] queue_cell_ID_50_reload;
input  [31:0] queue_cell_ID_49_reload;
input  [31:0] queue_cell_ID_48_reload;
input  [31:0] queue_cell_ID_47_reload;
input  [31:0] queue_cell_ID_46_reload;
input  [31:0] queue_cell_ID_45_reload;
input  [31:0] queue_cell_ID_44_reload;
input  [31:0] queue_cell_ID_43_reload;
input  [31:0] queue_cell_ID_42_reload;
input  [31:0] queue_cell_ID_41_reload;
input  [31:0] queue_cell_ID_40_reload;
input  [31:0] queue_cell_ID_39_reload;
input  [31:0] queue_cell_ID_38_reload;
input  [31:0] queue_offset_75_reload;
input  [31:0] queue_offset_74_reload;
input  [31:0] queue_offset_73_reload;
input  [31:0] queue_offset_72_reload;
input  [31:0] queue_offset_71_reload;
input  [31:0] queue_offset_70_reload;
input  [31:0] queue_offset_69_reload;
input  [31:0] queue_offset_68_reload;
input  [31:0] queue_offset_67_reload;
input  [31:0] queue_offset_66_reload;
input  [31:0] queue_offset_65_reload;
input  [31:0] queue_offset_64_reload;
input  [31:0] queue_offset_63_reload;
input  [31:0] queue_offset_62_reload;
input  [31:0] queue_offset_61_reload;
input  [31:0] queue_offset_60_reload;
input  [31:0] queue_offset_59_reload;
input  [31:0] queue_offset_58_reload;
input  [31:0] queue_offset_57_reload;
input  [31:0] queue_offset_56_reload;
input  [31:0] queue_offset_55_reload;
input  [31:0] queue_offset_54_reload;
input  [31:0] queue_offset_53_reload;
input  [31:0] queue_offset_52_reload;
input  [31:0] queue_offset_51_reload;
input  [31:0] queue_offset_50_reload;
input  [31:0] queue_offset_49_reload;
input  [31:0] queue_offset_48_reload;
input  [31:0] queue_offset_47_reload;
input  [31:0] queue_offset_46_reload;
input  [31:0] queue_offset_45_reload;
input  [31:0] queue_offset_44_reload;
input  [31:0] queue_offset_43_reload;
input  [31:0] queue_offset_42_reload;
input  [31:0] queue_offset_41_reload;
input  [31:0] queue_offset_40_reload;
input  [31:0] queue_offset_39_reload;
input  [31:0] queue_offset_38_reload;
input  [31:0] queue_dist_35_reload;
input  [31:0] queue_dist_34_reload;
input  [31:0] queue_dist_33_reload;
input  [31:0] queue_dist_32_reload;
input  [31:0] queue_dist_31_reload;
input  [31:0] queue_dist_30_reload;
input  [31:0] queue_dist_29_reload;
input  [31:0] queue_dist_28_reload;
input  [31:0] queue_dist_27_reload;
input  [31:0] queue_dist_26_reload;
input  [31:0] queue_dist_25_reload;
input  [31:0] queue_dist_24_reload;
input  [31:0] queue_dist_23_reload;
input  [31:0] queue_dist_22_reload;
input  [31:0] queue_dist_21_reload;
input  [31:0] queue_dist_20_reload;
input  [31:0] queue_dist_19_reload;
input  [31:0] queue_dist_18_reload;
input  [31:0] queue_dist_17_reload;
input  [31:0] queue_dist_16_reload;
input  [31:0] queue_dist_15_reload;
input  [31:0] queue_dist_14_reload;
input  [31:0] queue_dist_13_reload;
input  [31:0] queue_dist_12_reload;
input  [31:0] queue_dist_11_reload;
input  [31:0] queue_dist_10_reload;
input  [31:0] queue_dist_9_reload;
input  [31:0] queue_dist_8_reload;
input  [31:0] queue_dist_7_reload;
input  [31:0] queue_dist_6_reload;
input  [31:0] queue_dist_5_reload;
input  [31:0] queue_dist_4_reload;
input  [31:0] queue_dist_3_reload;
input  [31:0] queue_dist_2_reload;
input  [31:0] queue_dist_1_reload;
input  [31:0] queue_dist_reload;
input  [31:0] queue_dist_36_reload;
input  [31:0] queue_dist_37_reload;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg s_intermediate_result_with_offset_i_7_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln55_fu_975_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    s_intermediate_result_with_offset_i_7_blk_n;
wire    ap_block_pp0_stage0;
wire   [31:0] tmp_fu_981_p41;
reg   [31:0] tmp_reg_1266;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] tmp_s_fu_1065_p41;
reg   [31:0] tmp_s_reg_1271;
wire   [31:0] tmp_9_fu_1149_p41;
reg   [31:0] tmp_9_reg_1276;
reg   [5:0] i_8_fu_272;
wire   [5:0] add_ln55_fu_1233_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln174_fu_1244_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U7536(
    .din0(32'd0),
    .din1(queue_cell_ID_75_reload),
    .din2(queue_cell_ID_74_reload),
    .din3(queue_cell_ID_73_reload),
    .din4(queue_cell_ID_72_reload),
    .din5(queue_cell_ID_71_reload),
    .din6(queue_cell_ID_70_reload),
    .din7(queue_cell_ID_69_reload),
    .din8(queue_cell_ID_68_reload),
    .din9(queue_cell_ID_67_reload),
    .din10(queue_cell_ID_66_reload),
    .din11(queue_cell_ID_65_reload),
    .din12(queue_cell_ID_64_reload),
    .din13(queue_cell_ID_63_reload),
    .din14(queue_cell_ID_62_reload),
    .din15(queue_cell_ID_61_reload),
    .din16(queue_cell_ID_60_reload),
    .din17(queue_cell_ID_59_reload),
    .din18(queue_cell_ID_58_reload),
    .din19(queue_cell_ID_57_reload),
    .din20(queue_cell_ID_56_reload),
    .din21(queue_cell_ID_55_reload),
    .din22(queue_cell_ID_54_reload),
    .din23(queue_cell_ID_53_reload),
    .din24(queue_cell_ID_52_reload),
    .din25(queue_cell_ID_51_reload),
    .din26(queue_cell_ID_50_reload),
    .din27(queue_cell_ID_49_reload),
    .din28(queue_cell_ID_48_reload),
    .din29(queue_cell_ID_47_reload),
    .din30(queue_cell_ID_46_reload),
    .din31(queue_cell_ID_45_reload),
    .din32(queue_cell_ID_44_reload),
    .din33(queue_cell_ID_43_reload),
    .din34(queue_cell_ID_42_reload),
    .din35(queue_cell_ID_41_reload),
    .din36(queue_cell_ID_40_reload),
    .din37(queue_cell_ID_39_reload),
    .din38(queue_cell_ID_38_reload),
    .din39(ap_sig_allocacmp_i),
    .dout(tmp_fu_981_p41)
);

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U7537(
    .din0(32'd0),
    .din1(queue_offset_75_reload),
    .din2(queue_offset_74_reload),
    .din3(queue_offset_73_reload),
    .din4(queue_offset_72_reload),
    .din5(queue_offset_71_reload),
    .din6(queue_offset_70_reload),
    .din7(queue_offset_69_reload),
    .din8(queue_offset_68_reload),
    .din9(queue_offset_67_reload),
    .din10(queue_offset_66_reload),
    .din11(queue_offset_65_reload),
    .din12(queue_offset_64_reload),
    .din13(queue_offset_63_reload),
    .din14(queue_offset_62_reload),
    .din15(queue_offset_61_reload),
    .din16(queue_offset_60_reload),
    .din17(queue_offset_59_reload),
    .din18(queue_offset_58_reload),
    .din19(queue_offset_57_reload),
    .din20(queue_offset_56_reload),
    .din21(queue_offset_55_reload),
    .din22(queue_offset_54_reload),
    .din23(queue_offset_53_reload),
    .din24(queue_offset_52_reload),
    .din25(queue_offset_51_reload),
    .din26(queue_offset_50_reload),
    .din27(queue_offset_49_reload),
    .din28(queue_offset_48_reload),
    .din29(queue_offset_47_reload),
    .din30(queue_offset_46_reload),
    .din31(queue_offset_45_reload),
    .din32(queue_offset_44_reload),
    .din33(queue_offset_43_reload),
    .din34(queue_offset_42_reload),
    .din35(queue_offset_41_reload),
    .din36(queue_offset_40_reload),
    .din37(queue_offset_39_reload),
    .din38(queue_offset_38_reload),
    .din39(ap_sig_allocacmp_i),
    .dout(tmp_s_fu_1065_p41)
);

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U7538(
    .din0(32'd0),
    .din1(queue_dist_35_reload),
    .din2(queue_dist_34_reload),
    .din3(queue_dist_33_reload),
    .din4(queue_dist_32_reload),
    .din5(queue_dist_31_reload),
    .din6(queue_dist_30_reload),
    .din7(queue_dist_29_reload),
    .din8(queue_dist_28_reload),
    .din9(queue_dist_27_reload),
    .din10(queue_dist_26_reload),
    .din11(queue_dist_25_reload),
    .din12(queue_dist_24_reload),
    .din13(queue_dist_23_reload),
    .din14(queue_dist_22_reload),
    .din15(queue_dist_21_reload),
    .din16(queue_dist_20_reload),
    .din17(queue_dist_19_reload),
    .din18(queue_dist_18_reload),
    .din19(queue_dist_17_reload),
    .din20(queue_dist_16_reload),
    .din21(queue_dist_15_reload),
    .din22(queue_dist_14_reload),
    .din23(queue_dist_13_reload),
    .din24(queue_dist_12_reload),
    .din25(queue_dist_11_reload),
    .din26(queue_dist_10_reload),
    .din27(queue_dist_9_reload),
    .din28(queue_dist_8_reload),
    .din29(queue_dist_7_reload),
    .din30(queue_dist_6_reload),
    .din31(queue_dist_5_reload),
    .din32(queue_dist_4_reload),
    .din33(queue_dist_3_reload),
    .din34(queue_dist_2_reload),
    .din35(queue_dist_1_reload),
    .din36(queue_dist_reload),
    .din37(queue_dist_36_reload),
    .din38(queue_dist_37_reload),
    .din39(ap_sig_allocacmp_i),
    .dout(tmp_9_fu_1149_p41)
);

vadd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln55_fu_975_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_8_fu_272 <= add_ln55_fu_1233_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_8_fu_272 <= 6'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_975_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_9_reg_1276 <= tmp_9_fu_1149_p41;
        tmp_reg_1266 <= tmp_fu_981_p41;
        tmp_s_reg_1271 <= tmp_s_fu_1065_p41;
    end
end

always @ (*) begin
    if (((icmp_ln55_fu_975_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 6'd1;
    end else begin
        ap_sig_allocacmp_i = i_8_fu_272;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_intermediate_result_with_offset_i_7_blk_n = s_intermediate_result_with_offset_i_7_full_n;
    end else begin
        s_intermediate_result_with_offset_i_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_intermediate_result_with_offset_i_7_write = 1'b1;
    end else begin
        s_intermediate_result_with_offset_i_7_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_1233_p2 = (ap_sig_allocacmp_i + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((s_intermediate_result_with_offset_i_7_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((s_intermediate_result_with_offset_i_7_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((s_intermediate_result_with_offset_i_7_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (s_intermediate_result_with_offset_i_7_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = s_intermediate_result_with_offset_i_7_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bitcast_ln174_fu_1244_p1 = tmp_9_reg_1276;

assign icmp_ln55_fu_975_p2 = ((ap_sig_allocacmp_i == 6'd39) ? 1'b1 : 1'b0);

assign s_intermediate_result_with_offset_i_7_din = {{{bitcast_ln174_fu_1244_p1}, {tmp_s_reg_1271}}, {tmp_reg_1266}};

endmodule //vadd_insert_wrapper_28_Pipeline_VITIS_LOOP_55_4
