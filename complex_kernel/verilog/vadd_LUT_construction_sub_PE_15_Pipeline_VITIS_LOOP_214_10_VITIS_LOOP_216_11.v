// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vadd_LUT_construction_sub_PE_15_Pipeline_VITIS_LOOP_214_10_VITIS_LOOP_216_11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_partial_distance_LUT_i_15_din,
        s_partial_distance_LUT_i_15_num_data_valid,
        s_partial_distance_LUT_i_15_fifo_cap,
        s_partial_distance_LUT_i_15_full_n,
        s_partial_distance_LUT_i_15_write,
        sub_residual_vector_816_reload,
        sub_residual_vector_818_reload,
        sub_residual_vector_820_reload,
        sub_residual_vector_822_reload,
        sub_residual_vector_824_reload,
        sub_residual_vector_826_reload,
        sub_residual_vector_828_reload,
        sub_residual_vector_830_reload,
        sub_residual_vector_832_reload,
        sub_residual_vector_834_reload,
        sub_product_quantizer_address0,
        sub_product_quantizer_ce0,
        sub_product_quantizer_q0,
        sub_product_quantizer_2_address0,
        sub_product_quantizer_2_ce0,
        sub_product_quantizer_2_q0,
        sub_product_quantizer_4_address0,
        sub_product_quantizer_4_ce0,
        sub_product_quantizer_4_q0,
        sub_product_quantizer_6_address0,
        sub_product_quantizer_6_ce0,
        sub_product_quantizer_6_q0,
        sub_product_quantizer_8_address0,
        sub_product_quantizer_8_ce0,
        sub_product_quantizer_8_q0,
        sub_product_quantizer_10_address0,
        sub_product_quantizer_10_ce0,
        sub_product_quantizer_10_q0,
        sub_product_quantizer_12_address0,
        sub_product_quantizer_12_ce0,
        sub_product_quantizer_12_q0,
        sub_product_quantizer_14_address0,
        sub_product_quantizer_14_ce0,
        sub_product_quantizer_14_q0,
        sub_product_quantizer_16_address0,
        sub_product_quantizer_16_ce0,
        sub_product_quantizer_16_q0,
        sub_product_quantizer_18_address0,
        sub_product_quantizer_18_ce0,
        sub_product_quantizer_18_q0,
        sub_residual_vector_817_reload,
        sub_residual_vector_819_reload,
        sub_residual_vector_821_reload,
        sub_residual_vector_823_reload,
        sub_residual_vector_825_reload,
        sub_residual_vector_827_reload,
        sub_residual_vector_829_reload,
        sub_residual_vector_831_reload,
        sub_residual_vector_833_reload,
        sub_residual_vector_835_reload,
        sub_product_quantizer_1_address0,
        sub_product_quantizer_1_ce0,
        sub_product_quantizer_1_q0,
        sub_product_quantizer_3_address0,
        sub_product_quantizer_3_ce0,
        sub_product_quantizer_3_q0,
        sub_product_quantizer_5_address0,
        sub_product_quantizer_5_ce0,
        sub_product_quantizer_5_q0,
        sub_product_quantizer_7_address0,
        sub_product_quantizer_7_ce0,
        sub_product_quantizer_7_q0,
        sub_product_quantizer_9_address0,
        sub_product_quantizer_9_ce0,
        sub_product_quantizer_9_q0,
        sub_product_quantizer_11_address0,
        sub_product_quantizer_11_ce0,
        sub_product_quantizer_11_q0,
        sub_product_quantizer_13_address0,
        sub_product_quantizer_13_ce0,
        sub_product_quantizer_13_q0,
        sub_product_quantizer_15_address0,
        sub_product_quantizer_15_ce0,
        sub_product_quantizer_15_q0,
        sub_product_quantizer_17_address0,
        sub_product_quantizer_17_ce0,
        sub_product_quantizer_17_q0,
        sub_product_quantizer_19_address0,
        sub_product_quantizer_19_ce0,
        sub_product_quantizer_19_q0,
        sub_residual_vector_836_reload,
        sub_product_quantizer_20_address0,
        sub_product_quantizer_20_ce0,
        sub_product_quantizer_20_q0,
        sub_residual_vector_837_reload,
        sub_product_quantizer_21_address0,
        sub_product_quantizer_21_ce0,
        sub_product_quantizer_21_q0,
        sub_residual_vector_838_reload,
        sub_product_quantizer_22_address0,
        sub_product_quantizer_22_ce0,
        sub_product_quantizer_22_q0,
        sub_residual_vector_839_reload,
        sub_product_quantizer_23_address0,
        sub_product_quantizer_23_ce0,
        sub_product_quantizer_23_q0,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n,
        grp_fu_2304_p_din0,
        grp_fu_2304_p_din1,
        grp_fu_2304_p_opcode,
        grp_fu_2304_p_dout0,
        grp_fu_2304_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] s_partial_distance_LUT_i_15_din;
input  [1:0] s_partial_distance_LUT_i_15_num_data_valid;
input  [1:0] s_partial_distance_LUT_i_15_fifo_cap;
input   s_partial_distance_LUT_i_15_full_n;
output   s_partial_distance_LUT_i_15_write;
input  [31:0] sub_residual_vector_816_reload;
input  [31:0] sub_residual_vector_818_reload;
input  [31:0] sub_residual_vector_820_reload;
input  [31:0] sub_residual_vector_822_reload;
input  [31:0] sub_residual_vector_824_reload;
input  [31:0] sub_residual_vector_826_reload;
input  [31:0] sub_residual_vector_828_reload;
input  [31:0] sub_residual_vector_830_reload;
input  [31:0] sub_residual_vector_832_reload;
input  [31:0] sub_residual_vector_834_reload;
output  [7:0] sub_product_quantizer_address0;
output   sub_product_quantizer_ce0;
input  [31:0] sub_product_quantizer_q0;
output  [7:0] sub_product_quantizer_2_address0;
output   sub_product_quantizer_2_ce0;
input  [31:0] sub_product_quantizer_2_q0;
output  [7:0] sub_product_quantizer_4_address0;
output   sub_product_quantizer_4_ce0;
input  [31:0] sub_product_quantizer_4_q0;
output  [7:0] sub_product_quantizer_6_address0;
output   sub_product_quantizer_6_ce0;
input  [31:0] sub_product_quantizer_6_q0;
output  [7:0] sub_product_quantizer_8_address0;
output   sub_product_quantizer_8_ce0;
input  [31:0] sub_product_quantizer_8_q0;
output  [7:0] sub_product_quantizer_10_address0;
output   sub_product_quantizer_10_ce0;
input  [31:0] sub_product_quantizer_10_q0;
output  [7:0] sub_product_quantizer_12_address0;
output   sub_product_quantizer_12_ce0;
input  [31:0] sub_product_quantizer_12_q0;
output  [7:0] sub_product_quantizer_14_address0;
output   sub_product_quantizer_14_ce0;
input  [31:0] sub_product_quantizer_14_q0;
output  [7:0] sub_product_quantizer_16_address0;
output   sub_product_quantizer_16_ce0;
input  [31:0] sub_product_quantizer_16_q0;
output  [7:0] sub_product_quantizer_18_address0;
output   sub_product_quantizer_18_ce0;
input  [31:0] sub_product_quantizer_18_q0;
input  [31:0] sub_residual_vector_817_reload;
input  [31:0] sub_residual_vector_819_reload;
input  [31:0] sub_residual_vector_821_reload;
input  [31:0] sub_residual_vector_823_reload;
input  [31:0] sub_residual_vector_825_reload;
input  [31:0] sub_residual_vector_827_reload;
input  [31:0] sub_residual_vector_829_reload;
input  [31:0] sub_residual_vector_831_reload;
input  [31:0] sub_residual_vector_833_reload;
input  [31:0] sub_residual_vector_835_reload;
output  [7:0] sub_product_quantizer_1_address0;
output   sub_product_quantizer_1_ce0;
input  [31:0] sub_product_quantizer_1_q0;
output  [7:0] sub_product_quantizer_3_address0;
output   sub_product_quantizer_3_ce0;
input  [31:0] sub_product_quantizer_3_q0;
output  [7:0] sub_product_quantizer_5_address0;
output   sub_product_quantizer_5_ce0;
input  [31:0] sub_product_quantizer_5_q0;
output  [7:0] sub_product_quantizer_7_address0;
output   sub_product_quantizer_7_ce0;
input  [31:0] sub_product_quantizer_7_q0;
output  [7:0] sub_product_quantizer_9_address0;
output   sub_product_quantizer_9_ce0;
input  [31:0] sub_product_quantizer_9_q0;
output  [7:0] sub_product_quantizer_11_address0;
output   sub_product_quantizer_11_ce0;
input  [31:0] sub_product_quantizer_11_q0;
output  [7:0] sub_product_quantizer_13_address0;
output   sub_product_quantizer_13_ce0;
input  [31:0] sub_product_quantizer_13_q0;
output  [7:0] sub_product_quantizer_15_address0;
output   sub_product_quantizer_15_ce0;
input  [31:0] sub_product_quantizer_15_q0;
output  [7:0] sub_product_quantizer_17_address0;
output   sub_product_quantizer_17_ce0;
input  [31:0] sub_product_quantizer_17_q0;
output  [7:0] sub_product_quantizer_19_address0;
output   sub_product_quantizer_19_ce0;
input  [31:0] sub_product_quantizer_19_q0;
input  [31:0] sub_residual_vector_836_reload;
output  [7:0] sub_product_quantizer_20_address0;
output   sub_product_quantizer_20_ce0;
input  [31:0] sub_product_quantizer_20_q0;
input  [31:0] sub_residual_vector_837_reload;
output  [7:0] sub_product_quantizer_21_address0;
output   sub_product_quantizer_21_ce0;
input  [31:0] sub_product_quantizer_21_q0;
input  [31:0] sub_residual_vector_838_reload;
output  [7:0] sub_product_quantizer_22_address0;
output   sub_product_quantizer_22_ce0;
input  [31:0] sub_product_quantizer_22_q0;
input  [31:0] sub_residual_vector_839_reload;
output  [7:0] sub_product_quantizer_23_address0;
output   sub_product_quantizer_23_ce0;
input  [31:0] sub_product_quantizer_23_q0;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;
output  [31:0] grp_fu_2304_p_din0;
output  [31:0] grp_fu_2304_p_din1;
output  [1:0] grp_fu_2304_p_opcode;
input  [31:0] grp_fu_2304_p_dout0;
output   grp_fu_2304_p_ce;

reg ap_idle;
reg s_partial_distance_LUT_i_15_write;
reg sub_product_quantizer_ce0;
reg sub_product_quantizer_2_ce0;
reg sub_product_quantizer_4_ce0;
reg sub_product_quantizer_6_ce0;
reg sub_product_quantizer_8_ce0;
reg sub_product_quantizer_10_ce0;
reg sub_product_quantizer_12_ce0;
reg sub_product_quantizer_14_ce0;
reg sub_product_quantizer_16_ce0;
reg sub_product_quantizer_18_ce0;
reg sub_product_quantizer_1_ce0;
reg sub_product_quantizer_3_ce0;
reg sub_product_quantizer_5_ce0;
reg sub_product_quantizer_7_ce0;
reg sub_product_quantizer_9_ce0;
reg sub_product_quantizer_11_ce0;
reg sub_product_quantizer_13_ce0;
reg sub_product_quantizer_15_ce0;
reg sub_product_quantizer_17_ce0;
reg sub_product_quantizer_19_ce0;
reg sub_product_quantizer_20_ce0;
reg sub_product_quantizer_21_ce0;
reg sub_product_quantizer_22_ce0;
reg sub_product_quantizer_23_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_state30_pp0_stage0_iter29;
wire    ap_block_state31_pp0_stage0_iter30;
reg    ap_block_state32_pp0_stage0_iter31;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln214_fu_728_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    s_partial_distance_LUT_i_15_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln214_fu_774_p1;
reg   [63:0] zext_ln214_reg_1564;
reg   [63:0] zext_ln214_reg_1564_pp0_iter1_reg;
reg   [63:0] zext_ln214_reg_1564_pp0_iter2_reg;
reg   [63:0] zext_ln214_reg_1564_pp0_iter3_reg;
wire  signed [5:0] sub_ln223_fu_816_p2;
reg  signed [5:0] sub_ln223_reg_1580;
wire   [0:0] icmp_ln225_fu_832_p2;
reg   [0:0] icmp_ln225_reg_1640;
reg   [0:0] icmp_ln225_reg_1640_pp0_iter1_reg;
reg   [0:0] icmp_ln225_reg_1640_pp0_iter2_reg;
reg   [0:0] icmp_ln225_reg_1640_pp0_iter3_reg;
reg   [0:0] icmp_ln225_reg_1640_pp0_iter4_reg;
reg   [0:0] icmp_ln225_reg_1640_pp0_iter5_reg;
reg   [0:0] icmp_ln225_reg_1640_pp0_iter6_reg;
reg   [0:0] icmp_ln225_reg_1640_pp0_iter7_reg;
reg   [0:0] icmp_ln225_reg_1640_pp0_iter8_reg;
wire   [0:0] icmp_ln225_9_fu_838_p2;
reg   [0:0] icmp_ln225_9_reg_1653;
reg   [0:0] icmp_ln225_9_reg_1653_pp0_iter1_reg;
reg   [0:0] icmp_ln225_9_reg_1653_pp0_iter2_reg;
reg   [0:0] icmp_ln225_9_reg_1653_pp0_iter3_reg;
reg   [0:0] icmp_ln225_9_reg_1653_pp0_iter4_reg;
reg   [0:0] icmp_ln225_9_reg_1653_pp0_iter5_reg;
reg   [0:0] icmp_ln225_9_reg_1653_pp0_iter6_reg;
reg   [0:0] icmp_ln225_9_reg_1653_pp0_iter7_reg;
reg   [0:0] icmp_ln225_9_reg_1653_pp0_iter8_reg;
wire  signed [63:0] sub_ln223_cast_fu_859_p1;
reg  signed [63:0] sub_ln223_cast_reg_1661;
reg  signed [63:0] sub_ln223_cast_reg_1661_pp0_iter2_reg;
reg  signed [63:0] sub_ln223_cast_reg_1661_pp0_iter3_reg;
reg  signed [63:0] sub_ln223_cast_reg_1661_pp0_iter4_reg;
reg  signed [63:0] sub_ln223_cast_reg_1661_pp0_iter5_reg;
wire   [31:0] tmp_341_fu_862_p21;
reg   [31:0] tmp_341_reg_1674;
wire   [31:0] tmp_345_fu_906_p21;
reg   [31:0] tmp_345_reg_1679;
wire   [31:0] tmp_349_fu_950_p21;
reg   [31:0] tmp_349_reg_1684;
wire   [31:0] tmp_340_fu_994_p21;
wire   [31:0] tmp_344_fu_1028_p21;
wire   [31:0] tmp_348_fu_1062_p21;
reg   [31:0] L1_dist_reg_1764;
wire   [31:0] tmp_343_fu_1096_p21;
reg   [31:0] tmp_343_reg_1771;
wire   [31:0] grp_fu_641_p2;
reg   [31:0] sub94_2_reg_1776;
wire   [31:0] tmp_347_fu_1139_p21;
reg   [31:0] tmp_347_reg_1782;
wire   [31:0] grp_fu_645_p2;
reg   [31:0] sub94_4_reg_1787;
wire   [31:0] tmp_351_fu_1182_p21;
reg   [31:0] tmp_351_reg_1793;
wire   [31:0] tmp_342_fu_1225_p21;
wire   [31:0] L1_dist_96_fu_1264_p3;
reg   [31:0] L1_dist_96_reg_1803;
reg   [31:0] L1_dist_96_reg_1803_pp0_iter7_reg;
reg   [31:0] L1_dist_96_reg_1803_pp0_iter8_reg;
reg   [31:0] L1_dist_96_reg_1803_pp0_iter9_reg;
reg   [31:0] L1_dist_96_reg_1803_pp0_iter10_reg;
reg   [31:0] L1_dist_96_reg_1803_pp0_iter11_reg;
reg   [31:0] L1_dist_96_reg_1803_pp0_iter12_reg;
reg   [31:0] L1_dist_96_reg_1803_pp0_iter13_reg;
wire   [31:0] tmp_346_fu_1269_p21;
wire   [31:0] L1_dist_97_fu_1303_p3;
reg   [31:0] L1_dist_97_reg_1814;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter7_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter8_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter9_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter10_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter11_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter12_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter13_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter14_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter15_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter16_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter17_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter18_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter19_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter20_reg;
reg   [31:0] L1_dist_97_reg_1814_pp0_iter21_reg;
wire   [31:0] L1_dist_95_fu_1309_p3;
wire   [31:0] tmp_350_fu_1316_p21;
wire   [31:0] grp_fu_686_p2;
reg   [31:0] mul_i_reg_1831;
wire   [31:0] L1_dist_93_fu_1357_p3;
reg   [31:0] L1_dist_93_reg_1836;
reg   [31:0] L1_dist_93_reg_1836_pp0_iter10_reg;
reg   [31:0] L1_dist_93_reg_1836_pp0_iter11_reg;
reg   [31:0] L1_dist_93_reg_1836_pp0_iter12_reg;
reg   [31:0] L1_dist_93_reg_1836_pp0_iter13_reg;
reg   [31:0] L1_dist_93_reg_1836_pp0_iter14_reg;
reg   [31:0] L1_dist_93_reg_1836_pp0_iter15_reg;
reg   [31:0] L1_dist_93_reg_1836_pp0_iter16_reg;
reg   [31:0] L1_dist_93_reg_1836_pp0_iter17_reg;
wire   [31:0] L1_dist_99_fu_1364_p3;
reg   [31:0] L1_dist_99_reg_1842;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter10_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter11_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter12_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter13_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter14_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter15_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter16_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter17_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter18_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter19_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter20_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter21_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter22_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter23_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter24_reg;
reg   [31:0] L1_dist_99_reg_1842_pp0_iter25_reg;
wire   [31:0] L1_dist_98_fu_1371_p3;
reg   [31:0] L1_dist_98_reg_1848;
wire   [31:0] grp_fu_661_p2;
reg   [31:0] result_reg_1854;
wire   [31:0] grp_fu_690_p2;
reg   [31:0] mul_i_1_reg_1859;
wire   [31:0] grp_fu_666_p2;
reg   [31:0] result_46_reg_1864;
wire   [31:0] grp_fu_694_p2;
reg   [31:0] mul_i_2_reg_1869;
wire   [31:0] grp_fu_670_p2;
reg   [31:0] result_47_reg_1874;
wire   [31:0] grp_fu_698_p2;
reg   [31:0] mul_i_3_reg_1879;
wire   [31:0] grp_fu_674_p2;
reg   [31:0] result_48_reg_1884;
wire   [31:0] grp_fu_702_p2;
reg   [31:0] mul_i_4_reg_1889;
wire   [31:0] grp_fu_678_p2;
reg   [31:0] result_49_reg_1894;
wire   [31:0] grp_fu_706_p2;
reg   [31:0] mul_i_5_reg_1899;
reg   [2:0] m_per_PE_fu_162;
wire   [2:0] indvars_iv_next40_fu_822_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_m_per_PE_load;
reg   [8:0] k_fu_166;
wire   [8:0] select_ln214_9_fu_766_p3;
reg   [8:0] ap_sig_allocacmp_k_load;
reg   [10:0] indvar_flatten82_fu_170;
wire   [10:0] add_ln214_9_fu_734_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten82_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln216_fu_746_p2;
wire   [8:0] add_ln214_fu_760_p2;
wire   [2:0] select_ln214_fu_752_p3;
wire   [1:0] trunc_ln223_fu_790_p1;
wire   [4:0] shl_ln_fu_794_p3;
wire   [2:0] shl_ln223_fu_806_p2;
wire   [5:0] zext_ln223_fu_802_p1;
wire   [5:0] zext_ln223_9_fu_812_p1;
wire   [2:0] trunc_ln225_fu_828_p1;
wire   [31:0] L1_dist_92_fu_1259_p3;
wire   [31:0] grp_fu_653_p2;
wire   [31:0] grp_fu_649_p2;
wire   [31:0] L1_dist_94_fu_1350_p3;
wire   [31:0] grp_fu_657_p2;
wire   [31:0] grp_fu_682_p2;
reg    grp_fu_637_ce;
reg    grp_fu_641_ce;
reg    grp_fu_645_ce;
reg    grp_fu_649_ce;
reg    grp_fu_653_ce;
reg    grp_fu_657_ce;
reg    grp_fu_661_ce;
reg    grp_fu_666_ce;
reg    grp_fu_670_ce;
reg    grp_fu_674_ce;
reg    grp_fu_678_ce;
reg    grp_fu_682_ce;
reg    grp_fu_686_ce;
reg    grp_fu_690_ce;
reg    grp_fu_694_ce;
reg    grp_fu_698_ce;
reg    grp_fu_702_ce;
reg    grp_fu_706_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_block_pp0_stage0_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_done_reg = 1'b0;
end

vadd_fsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_4_full_dsp_1_U3868(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_344_fu_1028_p21),
    .din1(tmp_345_reg_1679),
    .ce(grp_fu_641_ce),
    .dout(grp_fu_641_p2)
);

vadd_fsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_4_full_dsp_1_U3869(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_348_fu_1062_p21),
    .din1(tmp_349_reg_1684),
    .ce(grp_fu_645_ce),
    .dout(grp_fu_645_p2)
);

vadd_fsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_4_full_dsp_1_U3870(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_342_fu_1225_p21),
    .din1(tmp_343_reg_1771),
    .ce(grp_fu_649_ce),
    .dout(grp_fu_649_p2)
);

vadd_fsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_4_full_dsp_1_U3871(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_346_fu_1269_p21),
    .din1(tmp_347_reg_1782),
    .ce(grp_fu_653_ce),
    .dout(grp_fu_653_p2)
);

vadd_fsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_4_full_dsp_1_U3872(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_350_fu_1316_p21),
    .din1(tmp_351_reg_1793),
    .ce(grp_fu_657_ce),
    .dout(grp_fu_657_p2)
);

vadd_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U3873(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_i_reg_1831),
    .din1(32'd0),
    .ce(grp_fu_661_ce),
    .dout(grp_fu_661_p2)
);

vadd_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U3874(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(result_reg_1854),
    .din1(mul_i_1_reg_1859),
    .ce(grp_fu_666_ce),
    .dout(grp_fu_666_p2)
);

vadd_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U3875(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(result_46_reg_1864),
    .din1(mul_i_2_reg_1869),
    .ce(grp_fu_670_ce),
    .dout(grp_fu_670_p2)
);

vadd_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U3876(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(result_47_reg_1874),
    .din1(mul_i_3_reg_1879),
    .ce(grp_fu_674_ce),
    .dout(grp_fu_674_p2)
);

vadd_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U3877(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(result_48_reg_1884),
    .din1(mul_i_4_reg_1889),
    .ce(grp_fu_678_ce),
    .dout(grp_fu_678_p2)
);

vadd_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U3878(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(result_49_reg_1894),
    .din1(mul_i_5_reg_1899),
    .ce(grp_fu_682_ce),
    .dout(grp_fu_682_p2)
);

vadd_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U3879(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(L1_dist_95_fu_1309_p3),
    .din1(L1_dist_95_fu_1309_p3),
    .ce(grp_fu_686_ce),
    .dout(grp_fu_686_p2)
);

vadd_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U3880(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(L1_dist_98_reg_1848),
    .din1(L1_dist_98_reg_1848),
    .ce(grp_fu_690_ce),
    .dout(grp_fu_690_p2)
);

vadd_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U3881(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(L1_dist_96_reg_1803_pp0_iter13_reg),
    .din1(L1_dist_96_reg_1803_pp0_iter13_reg),
    .ce(grp_fu_694_ce),
    .dout(grp_fu_694_p2)
);

vadd_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U3882(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(L1_dist_93_reg_1836_pp0_iter17_reg),
    .din1(L1_dist_93_reg_1836_pp0_iter17_reg),
    .ce(grp_fu_698_ce),
    .dout(grp_fu_698_p2)
);

vadd_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U3883(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(L1_dist_97_reg_1814_pp0_iter21_reg),
    .din1(L1_dist_97_reg_1814_pp0_iter21_reg),
    .ce(grp_fu_702_ce),
    .dout(grp_fu_702_p2)
);

vadd_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U3884(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(L1_dist_99_reg_1842_pp0_iter25_reg),
    .din1(L1_dist_99_reg_1842_pp0_iter25_reg),
    .ce(grp_fu_706_ce),
    .dout(grp_fu_706_p2)
);

vadd_mux_1964_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_1964_32_1_1_U3885(
    .din0(sub_product_quantizer_q0),
    .din1(32'd0),
    .din2(sub_product_quantizer_2_q0),
    .din3(32'd0),
    .din4(sub_product_quantizer_4_q0),
    .din5(32'd0),
    .din6(sub_product_quantizer_6_q0),
    .din7(32'd0),
    .din8(sub_product_quantizer_8_q0),
    .din9(32'd0),
    .din10(sub_product_quantizer_10_q0),
    .din11(32'd0),
    .din12(sub_product_quantizer_12_q0),
    .din13(32'd0),
    .din14(sub_product_quantizer_14_q0),
    .din15(32'd0),
    .din16(sub_product_quantizer_16_q0),
    .din17(32'd0),
    .din18(sub_product_quantizer_18_q0),
    .din19(sub_ln223_cast_fu_859_p1),
    .dout(tmp_341_fu_862_p21)
);

vadd_mux_1964_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_1964_32_1_1_U3886(
    .din0(sub_product_quantizer_2_q0),
    .din1(32'd0),
    .din2(sub_product_quantizer_4_q0),
    .din3(32'd0),
    .din4(sub_product_quantizer_6_q0),
    .din5(32'd0),
    .din6(sub_product_quantizer_8_q0),
    .din7(32'd0),
    .din8(sub_product_quantizer_10_q0),
    .din9(32'd0),
    .din10(sub_product_quantizer_12_q0),
    .din11(32'd0),
    .din12(sub_product_quantizer_14_q0),
    .din13(32'd0),
    .din14(sub_product_quantizer_16_q0),
    .din15(32'd0),
    .din16(sub_product_quantizer_18_q0),
    .din17(32'd0),
    .din18(sub_product_quantizer_20_q0),
    .din19(sub_ln223_cast_fu_859_p1),
    .dout(tmp_345_fu_906_p21)
);

vadd_mux_1964_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_1964_32_1_1_U3887(
    .din0(sub_product_quantizer_4_q0),
    .din1(32'd0),
    .din2(sub_product_quantizer_6_q0),
    .din3(32'd0),
    .din4(sub_product_quantizer_8_q0),
    .din5(32'd0),
    .din6(sub_product_quantizer_10_q0),
    .din7(32'd0),
    .din8(sub_product_quantizer_12_q0),
    .din9(32'd0),
    .din10(sub_product_quantizer_14_q0),
    .din11(32'd0),
    .din12(sub_product_quantizer_16_q0),
    .din13(32'd0),
    .din14(sub_product_quantizer_18_q0),
    .din15(32'd0),
    .din16(sub_product_quantizer_20_q0),
    .din17(32'd0),
    .din18(sub_product_quantizer_22_q0),
    .din19(sub_ln223_cast_fu_859_p1),
    .dout(tmp_349_fu_950_p21)
);

vadd_mux_1964_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_1964_32_1_1_U3888(
    .din0(sub_residual_vector_816_reload),
    .din1(32'd0),
    .din2(sub_residual_vector_818_reload),
    .din3(32'd0),
    .din4(sub_residual_vector_820_reload),
    .din5(32'd0),
    .din6(sub_residual_vector_822_reload),
    .din7(32'd0),
    .din8(sub_residual_vector_824_reload),
    .din9(32'd0),
    .din10(sub_residual_vector_826_reload),
    .din11(32'd0),
    .din12(sub_residual_vector_828_reload),
    .din13(32'd0),
    .din14(sub_residual_vector_830_reload),
    .din15(32'd0),
    .din16(sub_residual_vector_832_reload),
    .din17(32'd0),
    .din18(sub_residual_vector_834_reload),
    .din19(sub_ln223_cast_reg_1661),
    .dout(tmp_340_fu_994_p21)
);

vadd_mux_1964_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_1964_32_1_1_U3889(
    .din0(sub_residual_vector_818_reload),
    .din1(32'd0),
    .din2(sub_residual_vector_820_reload),
    .din3(32'd0),
    .din4(sub_residual_vector_822_reload),
    .din5(32'd0),
    .din6(sub_residual_vector_824_reload),
    .din7(32'd0),
    .din8(sub_residual_vector_826_reload),
    .din9(32'd0),
    .din10(sub_residual_vector_828_reload),
    .din11(32'd0),
    .din12(sub_residual_vector_830_reload),
    .din13(32'd0),
    .din14(sub_residual_vector_832_reload),
    .din15(32'd0),
    .din16(sub_residual_vector_834_reload),
    .din17(32'd0),
    .din18(sub_residual_vector_836_reload),
    .din19(sub_ln223_cast_reg_1661),
    .dout(tmp_344_fu_1028_p21)
);

vadd_mux_1964_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_1964_32_1_1_U3890(
    .din0(sub_residual_vector_820_reload),
    .din1(32'd0),
    .din2(sub_residual_vector_822_reload),
    .din3(32'd0),
    .din4(sub_residual_vector_824_reload),
    .din5(32'd0),
    .din6(sub_residual_vector_826_reload),
    .din7(32'd0),
    .din8(sub_residual_vector_828_reload),
    .din9(32'd0),
    .din10(sub_residual_vector_830_reload),
    .din11(32'd0),
    .din12(sub_residual_vector_832_reload),
    .din13(32'd0),
    .din14(sub_residual_vector_834_reload),
    .din15(32'd0),
    .din16(sub_residual_vector_836_reload),
    .din17(32'd0),
    .din18(sub_residual_vector_838_reload),
    .din19(sub_ln223_cast_reg_1661),
    .dout(tmp_348_fu_1062_p21)
);

vadd_mux_1964_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_1964_32_1_1_U3891(
    .din0(sub_product_quantizer_1_q0),
    .din1(32'd0),
    .din2(sub_product_quantizer_3_q0),
    .din3(32'd0),
    .din4(sub_product_quantizer_5_q0),
    .din5(32'd0),
    .din6(sub_product_quantizer_7_q0),
    .din7(32'd0),
    .din8(sub_product_quantizer_9_q0),
    .din9(32'd0),
    .din10(sub_product_quantizer_11_q0),
    .din11(32'd0),
    .din12(sub_product_quantizer_13_q0),
    .din13(32'd0),
    .din14(sub_product_quantizer_15_q0),
    .din15(32'd0),
    .din16(sub_product_quantizer_17_q0),
    .din17(32'd0),
    .din18(sub_product_quantizer_19_q0),
    .din19(sub_ln223_cast_reg_1661_pp0_iter4_reg),
    .dout(tmp_343_fu_1096_p21)
);

vadd_mux_1964_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_1964_32_1_1_U3892(
    .din0(sub_product_quantizer_3_q0),
    .din1(32'd0),
    .din2(sub_product_quantizer_5_q0),
    .din3(32'd0),
    .din4(sub_product_quantizer_7_q0),
    .din5(32'd0),
    .din6(sub_product_quantizer_9_q0),
    .din7(32'd0),
    .din8(sub_product_quantizer_11_q0),
    .din9(32'd0),
    .din10(sub_product_quantizer_13_q0),
    .din11(32'd0),
    .din12(sub_product_quantizer_15_q0),
    .din13(32'd0),
    .din14(sub_product_quantizer_17_q0),
    .din15(32'd0),
    .din16(sub_product_quantizer_19_q0),
    .din17(32'd0),
    .din18(sub_product_quantizer_21_q0),
    .din19(sub_ln223_cast_reg_1661_pp0_iter4_reg),
    .dout(tmp_347_fu_1139_p21)
);

vadd_mux_1964_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_1964_32_1_1_U3893(
    .din0(sub_product_quantizer_5_q0),
    .din1(32'd0),
    .din2(sub_product_quantizer_7_q0),
    .din3(32'd0),
    .din4(sub_product_quantizer_9_q0),
    .din5(32'd0),
    .din6(sub_product_quantizer_11_q0),
    .din7(32'd0),
    .din8(sub_product_quantizer_13_q0),
    .din9(32'd0),
    .din10(sub_product_quantizer_15_q0),
    .din11(32'd0),
    .din12(sub_product_quantizer_17_q0),
    .din13(32'd0),
    .din14(sub_product_quantizer_19_q0),
    .din15(32'd0),
    .din16(sub_product_quantizer_21_q0),
    .din17(32'd0),
    .din18(sub_product_quantizer_23_q0),
    .din19(sub_ln223_cast_reg_1661_pp0_iter4_reg),
    .dout(tmp_351_fu_1182_p21)
);

vadd_mux_1964_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_1964_32_1_1_U3894(
    .din0(sub_residual_vector_817_reload),
    .din1(32'd0),
    .din2(sub_residual_vector_819_reload),
    .din3(32'd0),
    .din4(sub_residual_vector_821_reload),
    .din5(32'd0),
    .din6(sub_residual_vector_823_reload),
    .din7(32'd0),
    .din8(sub_residual_vector_825_reload),
    .din9(32'd0),
    .din10(sub_residual_vector_827_reload),
    .din11(32'd0),
    .din12(sub_residual_vector_829_reload),
    .din13(32'd0),
    .din14(sub_residual_vector_831_reload),
    .din15(32'd0),
    .din16(sub_residual_vector_833_reload),
    .din17(32'd0),
    .din18(sub_residual_vector_835_reload),
    .din19(sub_ln223_cast_reg_1661_pp0_iter5_reg),
    .dout(tmp_342_fu_1225_p21)
);

vadd_mux_1964_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_1964_32_1_1_U3895(
    .din0(sub_residual_vector_819_reload),
    .din1(32'd0),
    .din2(sub_residual_vector_821_reload),
    .din3(32'd0),
    .din4(sub_residual_vector_823_reload),
    .din5(32'd0),
    .din6(sub_residual_vector_825_reload),
    .din7(32'd0),
    .din8(sub_residual_vector_827_reload),
    .din9(32'd0),
    .din10(sub_residual_vector_829_reload),
    .din11(32'd0),
    .din12(sub_residual_vector_831_reload),
    .din13(32'd0),
    .din14(sub_residual_vector_833_reload),
    .din15(32'd0),
    .din16(sub_residual_vector_835_reload),
    .din17(32'd0),
    .din18(sub_residual_vector_837_reload),
    .din19(sub_ln223_cast_reg_1661_pp0_iter5_reg),
    .dout(tmp_346_fu_1269_p21)
);

vadd_mux_1964_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
mux_1964_32_1_1_U3896(
    .din0(sub_residual_vector_821_reload),
    .din1(32'd0),
    .din2(sub_residual_vector_823_reload),
    .din3(32'd0),
    .din4(sub_residual_vector_825_reload),
    .din5(32'd0),
    .din6(sub_residual_vector_827_reload),
    .din7(32'd0),
    .din8(sub_residual_vector_829_reload),
    .din9(32'd0),
    .din10(sub_residual_vector_831_reload),
    .din11(32'd0),
    .din12(sub_residual_vector_833_reload),
    .din13(32'd0),
    .din14(sub_residual_vector_835_reload),
    .din15(32'd0),
    .din16(sub_residual_vector_837_reload),
    .din17(32'd0),
    .din18(sub_residual_vector_839_reload),
    .din19(sub_ln223_cast_reg_1661_pp0_iter5_reg),
    .dout(tmp_350_fu_1316_p21)
);

vadd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter30_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln214_fu_728_p2 == 1'd0))) begin
            indvar_flatten82_fu_170 <= add_ln214_9_fu_734_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten82_fu_170 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln214_fu_728_p2 == 1'd0))) begin
            k_fu_166 <= select_ln214_9_fu_766_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_166 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln214_fu_728_p2 == 1'd0))) begin
            m_per_PE_fu_162 <= indvars_iv_next40_fu_822_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            m_per_PE_fu_162 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        L1_dist_93_reg_1836 <= L1_dist_93_fu_1357_p3;
        L1_dist_93_reg_1836_pp0_iter10_reg <= L1_dist_93_reg_1836;
        L1_dist_93_reg_1836_pp0_iter11_reg <= L1_dist_93_reg_1836_pp0_iter10_reg;
        L1_dist_93_reg_1836_pp0_iter12_reg <= L1_dist_93_reg_1836_pp0_iter11_reg;
        L1_dist_93_reg_1836_pp0_iter13_reg <= L1_dist_93_reg_1836_pp0_iter12_reg;
        L1_dist_93_reg_1836_pp0_iter14_reg <= L1_dist_93_reg_1836_pp0_iter13_reg;
        L1_dist_93_reg_1836_pp0_iter15_reg <= L1_dist_93_reg_1836_pp0_iter14_reg;
        L1_dist_93_reg_1836_pp0_iter16_reg <= L1_dist_93_reg_1836_pp0_iter15_reg;
        L1_dist_93_reg_1836_pp0_iter17_reg <= L1_dist_93_reg_1836_pp0_iter16_reg;
        L1_dist_96_reg_1803 <= L1_dist_96_fu_1264_p3;
        L1_dist_96_reg_1803_pp0_iter10_reg <= L1_dist_96_reg_1803_pp0_iter9_reg;
        L1_dist_96_reg_1803_pp0_iter11_reg <= L1_dist_96_reg_1803_pp0_iter10_reg;
        L1_dist_96_reg_1803_pp0_iter12_reg <= L1_dist_96_reg_1803_pp0_iter11_reg;
        L1_dist_96_reg_1803_pp0_iter13_reg <= L1_dist_96_reg_1803_pp0_iter12_reg;
        L1_dist_96_reg_1803_pp0_iter7_reg <= L1_dist_96_reg_1803;
        L1_dist_96_reg_1803_pp0_iter8_reg <= L1_dist_96_reg_1803_pp0_iter7_reg;
        L1_dist_96_reg_1803_pp0_iter9_reg <= L1_dist_96_reg_1803_pp0_iter8_reg;
        L1_dist_97_reg_1814 <= L1_dist_97_fu_1303_p3;
        L1_dist_97_reg_1814_pp0_iter10_reg <= L1_dist_97_reg_1814_pp0_iter9_reg;
        L1_dist_97_reg_1814_pp0_iter11_reg <= L1_dist_97_reg_1814_pp0_iter10_reg;
        L1_dist_97_reg_1814_pp0_iter12_reg <= L1_dist_97_reg_1814_pp0_iter11_reg;
        L1_dist_97_reg_1814_pp0_iter13_reg <= L1_dist_97_reg_1814_pp0_iter12_reg;
        L1_dist_97_reg_1814_pp0_iter14_reg <= L1_dist_97_reg_1814_pp0_iter13_reg;
        L1_dist_97_reg_1814_pp0_iter15_reg <= L1_dist_97_reg_1814_pp0_iter14_reg;
        L1_dist_97_reg_1814_pp0_iter16_reg <= L1_dist_97_reg_1814_pp0_iter15_reg;
        L1_dist_97_reg_1814_pp0_iter17_reg <= L1_dist_97_reg_1814_pp0_iter16_reg;
        L1_dist_97_reg_1814_pp0_iter18_reg <= L1_dist_97_reg_1814_pp0_iter17_reg;
        L1_dist_97_reg_1814_pp0_iter19_reg <= L1_dist_97_reg_1814_pp0_iter18_reg;
        L1_dist_97_reg_1814_pp0_iter20_reg <= L1_dist_97_reg_1814_pp0_iter19_reg;
        L1_dist_97_reg_1814_pp0_iter21_reg <= L1_dist_97_reg_1814_pp0_iter20_reg;
        L1_dist_97_reg_1814_pp0_iter7_reg <= L1_dist_97_reg_1814;
        L1_dist_97_reg_1814_pp0_iter8_reg <= L1_dist_97_reg_1814_pp0_iter7_reg;
        L1_dist_97_reg_1814_pp0_iter9_reg <= L1_dist_97_reg_1814_pp0_iter8_reg;
        L1_dist_98_reg_1848 <= L1_dist_98_fu_1371_p3;
        L1_dist_99_reg_1842 <= L1_dist_99_fu_1364_p3;
        L1_dist_99_reg_1842_pp0_iter10_reg <= L1_dist_99_reg_1842;
        L1_dist_99_reg_1842_pp0_iter11_reg <= L1_dist_99_reg_1842_pp0_iter10_reg;
        L1_dist_99_reg_1842_pp0_iter12_reg <= L1_dist_99_reg_1842_pp0_iter11_reg;
        L1_dist_99_reg_1842_pp0_iter13_reg <= L1_dist_99_reg_1842_pp0_iter12_reg;
        L1_dist_99_reg_1842_pp0_iter14_reg <= L1_dist_99_reg_1842_pp0_iter13_reg;
        L1_dist_99_reg_1842_pp0_iter15_reg <= L1_dist_99_reg_1842_pp0_iter14_reg;
        L1_dist_99_reg_1842_pp0_iter16_reg <= L1_dist_99_reg_1842_pp0_iter15_reg;
        L1_dist_99_reg_1842_pp0_iter17_reg <= L1_dist_99_reg_1842_pp0_iter16_reg;
        L1_dist_99_reg_1842_pp0_iter18_reg <= L1_dist_99_reg_1842_pp0_iter17_reg;
        L1_dist_99_reg_1842_pp0_iter19_reg <= L1_dist_99_reg_1842_pp0_iter18_reg;
        L1_dist_99_reg_1842_pp0_iter20_reg <= L1_dist_99_reg_1842_pp0_iter19_reg;
        L1_dist_99_reg_1842_pp0_iter21_reg <= L1_dist_99_reg_1842_pp0_iter20_reg;
        L1_dist_99_reg_1842_pp0_iter22_reg <= L1_dist_99_reg_1842_pp0_iter21_reg;
        L1_dist_99_reg_1842_pp0_iter23_reg <= L1_dist_99_reg_1842_pp0_iter22_reg;
        L1_dist_99_reg_1842_pp0_iter24_reg <= L1_dist_99_reg_1842_pp0_iter23_reg;
        L1_dist_99_reg_1842_pp0_iter25_reg <= L1_dist_99_reg_1842_pp0_iter24_reg;
        L1_dist_reg_1764 <= grp_fu_2304_p_dout0;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln225_9_reg_1653_pp0_iter2_reg <= icmp_ln225_9_reg_1653_pp0_iter1_reg;
        icmp_ln225_9_reg_1653_pp0_iter3_reg <= icmp_ln225_9_reg_1653_pp0_iter2_reg;
        icmp_ln225_9_reg_1653_pp0_iter4_reg <= icmp_ln225_9_reg_1653_pp0_iter3_reg;
        icmp_ln225_9_reg_1653_pp0_iter5_reg <= icmp_ln225_9_reg_1653_pp0_iter4_reg;
        icmp_ln225_9_reg_1653_pp0_iter6_reg <= icmp_ln225_9_reg_1653_pp0_iter5_reg;
        icmp_ln225_9_reg_1653_pp0_iter7_reg <= icmp_ln225_9_reg_1653_pp0_iter6_reg;
        icmp_ln225_9_reg_1653_pp0_iter8_reg <= icmp_ln225_9_reg_1653_pp0_iter7_reg;
        icmp_ln225_reg_1640_pp0_iter2_reg <= icmp_ln225_reg_1640_pp0_iter1_reg;
        icmp_ln225_reg_1640_pp0_iter3_reg <= icmp_ln225_reg_1640_pp0_iter2_reg;
        icmp_ln225_reg_1640_pp0_iter4_reg <= icmp_ln225_reg_1640_pp0_iter3_reg;
        icmp_ln225_reg_1640_pp0_iter5_reg <= icmp_ln225_reg_1640_pp0_iter4_reg;
        icmp_ln225_reg_1640_pp0_iter6_reg <= icmp_ln225_reg_1640_pp0_iter5_reg;
        icmp_ln225_reg_1640_pp0_iter7_reg <= icmp_ln225_reg_1640_pp0_iter6_reg;
        icmp_ln225_reg_1640_pp0_iter8_reg <= icmp_ln225_reg_1640_pp0_iter7_reg;
        mul_i_1_reg_1859 <= grp_fu_690_p2;
        mul_i_2_reg_1869 <= grp_fu_694_p2;
        mul_i_3_reg_1879 <= grp_fu_698_p2;
        mul_i_4_reg_1889 <= grp_fu_702_p2;
        mul_i_5_reg_1899 <= grp_fu_706_p2;
        mul_i_reg_1831 <= grp_fu_686_p2;
        result_46_reg_1864 <= grp_fu_666_p2;
        result_47_reg_1874 <= grp_fu_670_p2;
        result_48_reg_1884 <= grp_fu_674_p2;
        result_49_reg_1894 <= grp_fu_678_p2;
        result_reg_1854 <= grp_fu_661_p2;
        sub94_2_reg_1776 <= grp_fu_641_p2;
        sub94_4_reg_1787 <= grp_fu_645_p2;
        sub_ln223_cast_reg_1661_pp0_iter2_reg[63 : 1] <= sub_ln223_cast_reg_1661[63 : 1];
        sub_ln223_cast_reg_1661_pp0_iter3_reg[63 : 1] <= sub_ln223_cast_reg_1661_pp0_iter2_reg[63 : 1];
        sub_ln223_cast_reg_1661_pp0_iter4_reg[63 : 1] <= sub_ln223_cast_reg_1661_pp0_iter3_reg[63 : 1];
        sub_ln223_cast_reg_1661_pp0_iter5_reg[63 : 1] <= sub_ln223_cast_reg_1661_pp0_iter4_reg[63 : 1];
        tmp_343_reg_1771 <= tmp_343_fu_1096_p21;
        tmp_347_reg_1782 <= tmp_347_fu_1139_p21;
        tmp_351_reg_1793 <= tmp_351_fu_1182_p21;
        zext_ln214_reg_1564_pp0_iter2_reg[8 : 0] <= zext_ln214_reg_1564_pp0_iter1_reg[8 : 0];
        zext_ln214_reg_1564_pp0_iter3_reg[8 : 0] <= zext_ln214_reg_1564_pp0_iter2_reg[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln225_9_reg_1653_pp0_iter1_reg <= icmp_ln225_9_reg_1653;
        icmp_ln225_reg_1640_pp0_iter1_reg <= icmp_ln225_reg_1640;
        sub_ln223_cast_reg_1661[63 : 1] <= sub_ln223_cast_fu_859_p1[63 : 1];
        tmp_341_reg_1674 <= tmp_341_fu_862_p21;
        tmp_345_reg_1679 <= tmp_345_fu_906_p21;
        tmp_349_reg_1684 <= tmp_349_fu_950_p21;
        zext_ln214_reg_1564_pp0_iter1_reg[8 : 0] <= zext_ln214_reg_1564[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln214_fu_728_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln225_9_reg_1653 <= icmp_ln225_9_fu_838_p2;
        icmp_ln225_reg_1640 <= icmp_ln225_fu_832_p2;
        sub_ln223_reg_1580[5 : 1] <= sub_ln223_fu_816_p2[5 : 1];
        zext_ln214_reg_1564[8 : 0] <= zext_ln214_fu_774_p1[8 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln214_fu_728_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter30_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten82_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten82_load = indvar_flatten82_fu_170;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_k_load = 9'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_166;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_m_per_PE_load = 3'd0;
    end else begin
        ap_sig_allocacmp_m_per_PE_load = m_per_PE_fu_162;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_637_ce = 1'b1;
    end else begin
        grp_fu_637_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_641_ce = 1'b1;
    end else begin
        grp_fu_641_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_645_ce = 1'b1;
    end else begin
        grp_fu_645_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_649_ce = 1'b1;
    end else begin
        grp_fu_649_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_653_ce = 1'b1;
    end else begin
        grp_fu_653_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_657_ce = 1'b1;
    end else begin
        grp_fu_657_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_661_ce = 1'b1;
    end else begin
        grp_fu_661_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_666_ce = 1'b1;
    end else begin
        grp_fu_666_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_670_ce = 1'b1;
    end else begin
        grp_fu_670_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_674_ce = 1'b1;
    end else begin
        grp_fu_674_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_678_ce = 1'b1;
    end else begin
        grp_fu_678_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_682_ce = 1'b1;
    end else begin
        grp_fu_682_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_686_ce = 1'b1;
    end else begin
        grp_fu_686_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_690_ce = 1'b1;
    end else begin
        grp_fu_690_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_694_ce = 1'b1;
    end else begin
        grp_fu_694_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_698_ce = 1'b1;
    end else begin
        grp_fu_698_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_702_ce = 1'b1;
    end else begin
        grp_fu_702_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_706_ce = 1'b1;
    end else begin
        grp_fu_706_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter31 == 1'b1))) begin
        s_partial_distance_LUT_i_15_blk_n = s_partial_distance_LUT_i_15_full_n;
    end else begin
        s_partial_distance_LUT_i_15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter31 == 1'b1))) begin
        s_partial_distance_LUT_i_15_write = 1'b1;
    end else begin
        s_partial_distance_LUT_i_15_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_10_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_11_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_12_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_13_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_14_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_15_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_16_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_17_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_18_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_19_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_1_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_20_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_21_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_22_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_23_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_2_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_3_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_4_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_5_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_6_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_7_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_8_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_9_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_product_quantizer_ce0 = 1'b1;
    end else begin
        sub_product_quantizer_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign L1_dist_92_fu_1259_p3 = ((icmp_ln225_reg_1640_pp0_iter5_reg[0:0] == 1'b1) ? sub94_2_reg_1776 : L1_dist_reg_1764);

assign L1_dist_93_fu_1357_p3 = ((icmp_ln225_reg_1640_pp0_iter8_reg[0:0] == 1'b1) ? grp_fu_649_p2 : grp_fu_653_p2);

assign L1_dist_94_fu_1350_p3 = ((icmp_ln225_reg_1640_pp0_iter8_reg[0:0] == 1'b1) ? grp_fu_653_p2 : grp_fu_649_p2);

assign L1_dist_95_fu_1309_p3 = ((icmp_ln225_9_reg_1653_pp0_iter5_reg[0:0] == 1'b1) ? sub94_4_reg_1787 : L1_dist_reg_1764);

assign L1_dist_96_fu_1264_p3 = ((icmp_ln225_reg_1640_pp0_iter5_reg[0:0] == 1'b1) ? L1_dist_reg_1764 : sub94_2_reg_1776);

assign L1_dist_97_fu_1303_p3 = ((icmp_ln225_9_reg_1653_pp0_iter5_reg[0:0] == 1'b1) ? L1_dist_92_fu_1259_p3 : sub94_4_reg_1787);

assign L1_dist_98_fu_1371_p3 = ((icmp_ln225_9_reg_1653_pp0_iter8_reg[0:0] == 1'b1) ? grp_fu_657_p2 : grp_fu_649_p2);

assign L1_dist_99_fu_1364_p3 = ((icmp_ln225_9_reg_1653_pp0_iter8_reg[0:0] == 1'b1) ? L1_dist_94_fu_1350_p3 : grp_fu_657_p2);

assign add_ln214_9_fu_734_p2 = (ap_sig_allocacmp_indvar_flatten82_load + 11'd1);

assign add_ln214_fu_760_p2 = (ap_sig_allocacmp_k_load + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((s_partial_distance_LUT_i_15_full_n == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((s_partial_distance_LUT_i_15_full_n == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((s_partial_distance_LUT_i_15_full_n == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((s_partial_distance_LUT_i_15_full_n == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_pp0_stage0_iter31 = (s_partial_distance_LUT_i_15_full_n == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = s_partial_distance_LUT_i_15_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign grp_fu_2304_p_ce = grp_fu_637_ce;

assign grp_fu_2304_p_din0 = tmp_340_fu_994_p21;

assign grp_fu_2304_p_din1 = tmp_341_reg_1674;

assign grp_fu_2304_p_opcode = 2'd1;

assign icmp_ln214_fu_728_p2 = ((ap_sig_allocacmp_indvar_flatten82_load == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_746_p2 = ((ap_sig_allocacmp_m_per_PE_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln225_9_fu_838_p2 = ((trunc_ln225_fu_828_p1 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln225_fu_832_p2 = ((trunc_ln225_fu_828_p1 == 3'd2) ? 1'b1 : 1'b0);

assign indvars_iv_next40_fu_822_p2 = (select_ln214_fu_752_p3 + 3'd1);

assign s_partial_distance_LUT_i_15_din = grp_fu_682_p2;

assign select_ln214_9_fu_766_p3 = ((icmp_ln216_fu_746_p2[0:0] == 1'b1) ? add_ln214_fu_760_p2 : ap_sig_allocacmp_k_load);

assign select_ln214_fu_752_p3 = ((icmp_ln216_fu_746_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_m_per_PE_load);

assign shl_ln223_fu_806_p2 = select_ln214_fu_752_p3 << 3'd1;

assign shl_ln_fu_794_p3 = {{trunc_ln223_fu_790_p1}, {3'd0}};

assign sub_ln223_cast_fu_859_p1 = sub_ln223_reg_1580;

assign sub_ln223_fu_816_p2 = (zext_ln223_fu_802_p1 - zext_ln223_9_fu_812_p1);

assign sub_product_quantizer_10_address0 = zext_ln214_fu_774_p1;

assign sub_product_quantizer_11_address0 = zext_ln214_reg_1564_pp0_iter3_reg;

assign sub_product_quantizer_12_address0 = zext_ln214_fu_774_p1;

assign sub_product_quantizer_13_address0 = zext_ln214_reg_1564_pp0_iter3_reg;

assign sub_product_quantizer_14_address0 = zext_ln214_fu_774_p1;

assign sub_product_quantizer_15_address0 = zext_ln214_reg_1564_pp0_iter3_reg;

assign sub_product_quantizer_16_address0 = zext_ln214_fu_774_p1;

assign sub_product_quantizer_17_address0 = zext_ln214_reg_1564_pp0_iter3_reg;

assign sub_product_quantizer_18_address0 = zext_ln214_fu_774_p1;

assign sub_product_quantizer_19_address0 = zext_ln214_reg_1564_pp0_iter3_reg;

assign sub_product_quantizer_1_address0 = zext_ln214_reg_1564_pp0_iter3_reg;

assign sub_product_quantizer_20_address0 = zext_ln214_fu_774_p1;

assign sub_product_quantizer_21_address0 = zext_ln214_reg_1564_pp0_iter3_reg;

assign sub_product_quantizer_22_address0 = zext_ln214_fu_774_p1;

assign sub_product_quantizer_23_address0 = zext_ln214_reg_1564_pp0_iter3_reg;

assign sub_product_quantizer_2_address0 = zext_ln214_fu_774_p1;

assign sub_product_quantizer_3_address0 = zext_ln214_reg_1564_pp0_iter3_reg;

assign sub_product_quantizer_4_address0 = zext_ln214_fu_774_p1;

assign sub_product_quantizer_5_address0 = zext_ln214_reg_1564_pp0_iter3_reg;

assign sub_product_quantizer_6_address0 = zext_ln214_fu_774_p1;

assign sub_product_quantizer_7_address0 = zext_ln214_reg_1564_pp0_iter3_reg;

assign sub_product_quantizer_8_address0 = zext_ln214_fu_774_p1;

assign sub_product_quantizer_9_address0 = zext_ln214_reg_1564_pp0_iter3_reg;

assign sub_product_quantizer_address0 = zext_ln214_fu_774_p1;

assign trunc_ln223_fu_790_p1 = select_ln214_fu_752_p3[1:0];

assign trunc_ln225_fu_828_p1 = sub_ln223_fu_816_p2[2:0];

assign zext_ln214_fu_774_p1 = select_ln214_9_fu_766_p3;

assign zext_ln223_9_fu_812_p1 = shl_ln223_fu_806_p2;

assign zext_ln223_fu_802_p1 = shl_ln_fu_794_p3;

always @ (posedge ap_clk) begin
    zext_ln214_reg_1564[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln214_reg_1564_pp0_iter1_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln214_reg_1564_pp0_iter2_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln214_reg_1564_pp0_iter3_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    sub_ln223_reg_1580[0] <= 1'b0;
    sub_ln223_cast_reg_1661[0] <= 1'b0;
    sub_ln223_cast_reg_1661_pp0_iter2_reg[0] <= 1'b0;
    sub_ln223_cast_reg_1661_pp0_iter3_reg[0] <= 1'b0;
    sub_ln223_cast_reg_1661_pp0_iter4_reg[0] <= 1'b0;
    sub_ln223_cast_reg_1661_pp0_iter5_reg[0] <= 1'b0;
end

endmodule //vadd_LUT_construction_sub_PE_15_Pipeline_VITIS_LOOP_214_10_VITIS_LOOP_216_11
