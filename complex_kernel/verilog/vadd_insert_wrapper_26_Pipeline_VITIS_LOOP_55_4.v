// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vadd_insert_wrapper_26_Pipeline_VITIS_LOOP_55_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_intermediate_result_with_offset_i_5_din,
        s_intermediate_result_with_offset_i_5_num_data_valid,
        s_intermediate_result_with_offset_i_5_fifo_cap,
        s_intermediate_result_with_offset_i_5_full_n,
        s_intermediate_result_with_offset_i_5_write,
        queue_cell_ID_377_reload,
        queue_cell_ID_376_reload,
        queue_cell_ID_375_reload,
        queue_cell_ID_374_reload,
        queue_cell_ID_373_reload,
        queue_cell_ID_372_reload,
        queue_cell_ID_371_reload,
        queue_cell_ID_370_reload,
        queue_cell_ID_369_reload,
        queue_cell_ID_368_reload,
        queue_cell_ID_367_reload,
        queue_cell_ID_366_reload,
        queue_cell_ID_365_reload,
        queue_cell_ID_364_reload,
        queue_cell_ID_363_reload,
        queue_cell_ID_362_reload,
        queue_cell_ID_361_reload,
        queue_cell_ID_360_reload,
        queue_cell_ID_359_reload,
        queue_cell_ID_358_reload,
        queue_cell_ID_357_reload,
        queue_cell_ID_356_reload,
        queue_cell_ID_355_reload,
        queue_cell_ID_354_reload,
        queue_cell_ID_353_reload,
        queue_cell_ID_352_reload,
        queue_cell_ID_351_reload,
        queue_cell_ID_350_reload,
        queue_cell_ID_349_reload,
        queue_cell_ID_348_reload,
        queue_cell_ID_347_reload,
        queue_cell_ID_346_reload,
        queue_cell_ID_345_reload,
        queue_cell_ID_344_reload,
        queue_cell_ID_343_reload,
        queue_cell_ID_342_reload,
        queue_cell_ID_341_reload,
        queue_cell_ID_340_reload,
        queue_offset_377_reload,
        queue_offset_376_reload,
        queue_offset_375_reload,
        queue_offset_374_reload,
        queue_offset_373_reload,
        queue_offset_372_reload,
        queue_offset_371_reload,
        queue_offset_370_reload,
        queue_offset_369_reload,
        queue_offset_368_reload,
        queue_offset_367_reload,
        queue_offset_366_reload,
        queue_offset_365_reload,
        queue_offset_364_reload,
        queue_offset_363_reload,
        queue_offset_362_reload,
        queue_offset_361_reload,
        queue_offset_360_reload,
        queue_offset_359_reload,
        queue_offset_358_reload,
        queue_offset_357_reload,
        queue_offset_356_reload,
        queue_offset_355_reload,
        queue_offset_354_reload,
        queue_offset_353_reload,
        queue_offset_352_reload,
        queue_offset_351_reload,
        queue_offset_350_reload,
        queue_offset_349_reload,
        queue_offset_348_reload,
        queue_offset_347_reload,
        queue_offset_346_reload,
        queue_offset_345_reload,
        queue_offset_344_reload,
        queue_offset_343_reload,
        queue_offset_342_reload,
        queue_offset_341_reload,
        queue_offset_340_reload,
        queue_dist_485_reload,
        queue_dist_484_reload,
        queue_dist_483_reload,
        queue_dist_482_reload,
        queue_dist_481_reload,
        queue_dist_480_reload,
        queue_dist_479_reload,
        queue_dist_478_reload,
        queue_dist_477_reload,
        queue_dist_476_reload,
        queue_dist_475_reload,
        queue_dist_474_reload,
        queue_dist_473_reload,
        queue_dist_472_reload,
        queue_dist_471_reload,
        queue_dist_470_reload,
        queue_dist_469_reload,
        queue_dist_468_reload,
        queue_dist_467_reload,
        queue_dist_466_reload,
        queue_dist_465_reload,
        queue_dist_464_reload,
        queue_dist_463_reload,
        queue_dist_462_reload,
        queue_dist_461_reload,
        queue_dist_460_reload,
        queue_dist_459_reload,
        queue_dist_458_reload,
        queue_dist_457_reload,
        queue_dist_456_reload,
        queue_dist_455_reload,
        queue_dist_454_reload,
        queue_dist_453_reload,
        queue_dist_452_reload,
        queue_dist_451_reload,
        queue_dist_reload,
        queue_dist_486_reload,
        queue_dist_487_reload,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [95:0] s_intermediate_result_with_offset_i_5_din;
input  [3:0] s_intermediate_result_with_offset_i_5_num_data_valid;
input  [3:0] s_intermediate_result_with_offset_i_5_fifo_cap;
input   s_intermediate_result_with_offset_i_5_full_n;
output   s_intermediate_result_with_offset_i_5_write;
input  [31:0] queue_cell_ID_377_reload;
input  [31:0] queue_cell_ID_376_reload;
input  [31:0] queue_cell_ID_375_reload;
input  [31:0] queue_cell_ID_374_reload;
input  [31:0] queue_cell_ID_373_reload;
input  [31:0] queue_cell_ID_372_reload;
input  [31:0] queue_cell_ID_371_reload;
input  [31:0] queue_cell_ID_370_reload;
input  [31:0] queue_cell_ID_369_reload;
input  [31:0] queue_cell_ID_368_reload;
input  [31:0] queue_cell_ID_367_reload;
input  [31:0] queue_cell_ID_366_reload;
input  [31:0] queue_cell_ID_365_reload;
input  [31:0] queue_cell_ID_364_reload;
input  [31:0] queue_cell_ID_363_reload;
input  [31:0] queue_cell_ID_362_reload;
input  [31:0] queue_cell_ID_361_reload;
input  [31:0] queue_cell_ID_360_reload;
input  [31:0] queue_cell_ID_359_reload;
input  [31:0] queue_cell_ID_358_reload;
input  [31:0] queue_cell_ID_357_reload;
input  [31:0] queue_cell_ID_356_reload;
input  [31:0] queue_cell_ID_355_reload;
input  [31:0] queue_cell_ID_354_reload;
input  [31:0] queue_cell_ID_353_reload;
input  [31:0] queue_cell_ID_352_reload;
input  [31:0] queue_cell_ID_351_reload;
input  [31:0] queue_cell_ID_350_reload;
input  [31:0] queue_cell_ID_349_reload;
input  [31:0] queue_cell_ID_348_reload;
input  [31:0] queue_cell_ID_347_reload;
input  [31:0] queue_cell_ID_346_reload;
input  [31:0] queue_cell_ID_345_reload;
input  [31:0] queue_cell_ID_344_reload;
input  [31:0] queue_cell_ID_343_reload;
input  [31:0] queue_cell_ID_342_reload;
input  [31:0] queue_cell_ID_341_reload;
input  [31:0] queue_cell_ID_340_reload;
input  [31:0] queue_offset_377_reload;
input  [31:0] queue_offset_376_reload;
input  [31:0] queue_offset_375_reload;
input  [31:0] queue_offset_374_reload;
input  [31:0] queue_offset_373_reload;
input  [31:0] queue_offset_372_reload;
input  [31:0] queue_offset_371_reload;
input  [31:0] queue_offset_370_reload;
input  [31:0] queue_offset_369_reload;
input  [31:0] queue_offset_368_reload;
input  [31:0] queue_offset_367_reload;
input  [31:0] queue_offset_366_reload;
input  [31:0] queue_offset_365_reload;
input  [31:0] queue_offset_364_reload;
input  [31:0] queue_offset_363_reload;
input  [31:0] queue_offset_362_reload;
input  [31:0] queue_offset_361_reload;
input  [31:0] queue_offset_360_reload;
input  [31:0] queue_offset_359_reload;
input  [31:0] queue_offset_358_reload;
input  [31:0] queue_offset_357_reload;
input  [31:0] queue_offset_356_reload;
input  [31:0] queue_offset_355_reload;
input  [31:0] queue_offset_354_reload;
input  [31:0] queue_offset_353_reload;
input  [31:0] queue_offset_352_reload;
input  [31:0] queue_offset_351_reload;
input  [31:0] queue_offset_350_reload;
input  [31:0] queue_offset_349_reload;
input  [31:0] queue_offset_348_reload;
input  [31:0] queue_offset_347_reload;
input  [31:0] queue_offset_346_reload;
input  [31:0] queue_offset_345_reload;
input  [31:0] queue_offset_344_reload;
input  [31:0] queue_offset_343_reload;
input  [31:0] queue_offset_342_reload;
input  [31:0] queue_offset_341_reload;
input  [31:0] queue_offset_340_reload;
input  [31:0] queue_dist_485_reload;
input  [31:0] queue_dist_484_reload;
input  [31:0] queue_dist_483_reload;
input  [31:0] queue_dist_482_reload;
input  [31:0] queue_dist_481_reload;
input  [31:0] queue_dist_480_reload;
input  [31:0] queue_dist_479_reload;
input  [31:0] queue_dist_478_reload;
input  [31:0] queue_dist_477_reload;
input  [31:0] queue_dist_476_reload;
input  [31:0] queue_dist_475_reload;
input  [31:0] queue_dist_474_reload;
input  [31:0] queue_dist_473_reload;
input  [31:0] queue_dist_472_reload;
input  [31:0] queue_dist_471_reload;
input  [31:0] queue_dist_470_reload;
input  [31:0] queue_dist_469_reload;
input  [31:0] queue_dist_468_reload;
input  [31:0] queue_dist_467_reload;
input  [31:0] queue_dist_466_reload;
input  [31:0] queue_dist_465_reload;
input  [31:0] queue_dist_464_reload;
input  [31:0] queue_dist_463_reload;
input  [31:0] queue_dist_462_reload;
input  [31:0] queue_dist_461_reload;
input  [31:0] queue_dist_460_reload;
input  [31:0] queue_dist_459_reload;
input  [31:0] queue_dist_458_reload;
input  [31:0] queue_dist_457_reload;
input  [31:0] queue_dist_456_reload;
input  [31:0] queue_dist_455_reload;
input  [31:0] queue_dist_454_reload;
input  [31:0] queue_dist_453_reload;
input  [31:0] queue_dist_452_reload;
input  [31:0] queue_dist_451_reload;
input  [31:0] queue_dist_reload;
input  [31:0] queue_dist_486_reload;
input  [31:0] queue_dist_487_reload;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg s_intermediate_result_with_offset_i_5_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln55_fu_975_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    s_intermediate_result_with_offset_i_5_blk_n;
wire    ap_block_pp0_stage0;
wire   [31:0] tmp_fu_981_p41;
reg   [31:0] tmp_reg_1266;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] tmp_s_fu_1065_p41;
reg   [31:0] tmp_s_reg_1271;
wire   [31:0] tmp_2_fu_1149_p41;
reg   [31:0] tmp_2_reg_1276;
reg   [5:0] i_fu_272;
wire   [5:0] add_ln55_fu_1233_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_10;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln174_fu_1244_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U6869(
    .din0(32'd0),
    .din1(queue_cell_ID_377_reload),
    .din2(queue_cell_ID_376_reload),
    .din3(queue_cell_ID_375_reload),
    .din4(queue_cell_ID_374_reload),
    .din5(queue_cell_ID_373_reload),
    .din6(queue_cell_ID_372_reload),
    .din7(queue_cell_ID_371_reload),
    .din8(queue_cell_ID_370_reload),
    .din9(queue_cell_ID_369_reload),
    .din10(queue_cell_ID_368_reload),
    .din11(queue_cell_ID_367_reload),
    .din12(queue_cell_ID_366_reload),
    .din13(queue_cell_ID_365_reload),
    .din14(queue_cell_ID_364_reload),
    .din15(queue_cell_ID_363_reload),
    .din16(queue_cell_ID_362_reload),
    .din17(queue_cell_ID_361_reload),
    .din18(queue_cell_ID_360_reload),
    .din19(queue_cell_ID_359_reload),
    .din20(queue_cell_ID_358_reload),
    .din21(queue_cell_ID_357_reload),
    .din22(queue_cell_ID_356_reload),
    .din23(queue_cell_ID_355_reload),
    .din24(queue_cell_ID_354_reload),
    .din25(queue_cell_ID_353_reload),
    .din26(queue_cell_ID_352_reload),
    .din27(queue_cell_ID_351_reload),
    .din28(queue_cell_ID_350_reload),
    .din29(queue_cell_ID_349_reload),
    .din30(queue_cell_ID_348_reload),
    .din31(queue_cell_ID_347_reload),
    .din32(queue_cell_ID_346_reload),
    .din33(queue_cell_ID_345_reload),
    .din34(queue_cell_ID_344_reload),
    .din35(queue_cell_ID_343_reload),
    .din36(queue_cell_ID_342_reload),
    .din37(queue_cell_ID_341_reload),
    .din38(queue_cell_ID_340_reload),
    .din39(ap_sig_allocacmp_i_10),
    .dout(tmp_fu_981_p41)
);

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U6870(
    .din0(32'd0),
    .din1(queue_offset_377_reload),
    .din2(queue_offset_376_reload),
    .din3(queue_offset_375_reload),
    .din4(queue_offset_374_reload),
    .din5(queue_offset_373_reload),
    .din6(queue_offset_372_reload),
    .din7(queue_offset_371_reload),
    .din8(queue_offset_370_reload),
    .din9(queue_offset_369_reload),
    .din10(queue_offset_368_reload),
    .din11(queue_offset_367_reload),
    .din12(queue_offset_366_reload),
    .din13(queue_offset_365_reload),
    .din14(queue_offset_364_reload),
    .din15(queue_offset_363_reload),
    .din16(queue_offset_362_reload),
    .din17(queue_offset_361_reload),
    .din18(queue_offset_360_reload),
    .din19(queue_offset_359_reload),
    .din20(queue_offset_358_reload),
    .din21(queue_offset_357_reload),
    .din22(queue_offset_356_reload),
    .din23(queue_offset_355_reload),
    .din24(queue_offset_354_reload),
    .din25(queue_offset_353_reload),
    .din26(queue_offset_352_reload),
    .din27(queue_offset_351_reload),
    .din28(queue_offset_350_reload),
    .din29(queue_offset_349_reload),
    .din30(queue_offset_348_reload),
    .din31(queue_offset_347_reload),
    .din32(queue_offset_346_reload),
    .din33(queue_offset_345_reload),
    .din34(queue_offset_344_reload),
    .din35(queue_offset_343_reload),
    .din36(queue_offset_342_reload),
    .din37(queue_offset_341_reload),
    .din38(queue_offset_340_reload),
    .din39(ap_sig_allocacmp_i_10),
    .dout(tmp_s_fu_1065_p41)
);

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U6871(
    .din0(32'd0),
    .din1(queue_dist_485_reload),
    .din2(queue_dist_484_reload),
    .din3(queue_dist_483_reload),
    .din4(queue_dist_482_reload),
    .din5(queue_dist_481_reload),
    .din6(queue_dist_480_reload),
    .din7(queue_dist_479_reload),
    .din8(queue_dist_478_reload),
    .din9(queue_dist_477_reload),
    .din10(queue_dist_476_reload),
    .din11(queue_dist_475_reload),
    .din12(queue_dist_474_reload),
    .din13(queue_dist_473_reload),
    .din14(queue_dist_472_reload),
    .din15(queue_dist_471_reload),
    .din16(queue_dist_470_reload),
    .din17(queue_dist_469_reload),
    .din18(queue_dist_468_reload),
    .din19(queue_dist_467_reload),
    .din20(queue_dist_466_reload),
    .din21(queue_dist_465_reload),
    .din22(queue_dist_464_reload),
    .din23(queue_dist_463_reload),
    .din24(queue_dist_462_reload),
    .din25(queue_dist_461_reload),
    .din26(queue_dist_460_reload),
    .din27(queue_dist_459_reload),
    .din28(queue_dist_458_reload),
    .din29(queue_dist_457_reload),
    .din30(queue_dist_456_reload),
    .din31(queue_dist_455_reload),
    .din32(queue_dist_454_reload),
    .din33(queue_dist_453_reload),
    .din34(queue_dist_452_reload),
    .din35(queue_dist_451_reload),
    .din36(queue_dist_reload),
    .din37(queue_dist_486_reload),
    .din38(queue_dist_487_reload),
    .din39(ap_sig_allocacmp_i_10),
    .dout(tmp_2_fu_1149_p41)
);

vadd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln55_fu_975_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_272 <= add_ln55_fu_1233_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_272 <= 6'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_975_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_1276 <= tmp_2_fu_1149_p41;
        tmp_reg_1266 <= tmp_fu_981_p41;
        tmp_s_reg_1271 <= tmp_s_fu_1065_p41;
    end
end

always @ (*) begin
    if (((icmp_ln55_fu_975_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_10 = 6'd1;
    end else begin
        ap_sig_allocacmp_i_10 = i_fu_272;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_intermediate_result_with_offset_i_5_blk_n = s_intermediate_result_with_offset_i_5_full_n;
    end else begin
        s_intermediate_result_with_offset_i_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_intermediate_result_with_offset_i_5_write = 1'b1;
    end else begin
        s_intermediate_result_with_offset_i_5_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_1233_p2 = (ap_sig_allocacmp_i_10 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((s_intermediate_result_with_offset_i_5_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((s_intermediate_result_with_offset_i_5_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((s_intermediate_result_with_offset_i_5_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (s_intermediate_result_with_offset_i_5_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = s_intermediate_result_with_offset_i_5_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bitcast_ln174_fu_1244_p1 = tmp_2_reg_1276;

assign icmp_ln55_fu_975_p2 = ((ap_sig_allocacmp_i_10 == 6'd39) ? 1'b1 : 1'b0);

assign s_intermediate_result_with_offset_i_5_din = {{{bitcast_ln174_fu_1244_p1}, {tmp_s_reg_1271}}, {tmp_reg_1266}};

endmodule //vadd_insert_wrapper_26_Pipeline_VITIS_LOOP_55_4
