// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vadd_insert_wrapper_1_Pipeline_VITIS_LOOP_55_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_intermediate_result_with_offset_i_0_din,
        s_intermediate_result_with_offset_i_0_num_data_valid,
        s_intermediate_result_with_offset_i_0_fifo_cap,
        s_intermediate_result_with_offset_i_0_full_n,
        s_intermediate_result_with_offset_i_0_write,
        queue_cell_ID_1132_reload,
        queue_cell_ID_1131_reload,
        queue_cell_ID_1130_reload,
        queue_cell_ID_1129_reload,
        queue_cell_ID_1128_reload,
        queue_cell_ID_1127_reload,
        queue_cell_ID_1126_reload,
        queue_cell_ID_1125_reload,
        queue_cell_ID_1124_reload,
        queue_cell_ID_1123_reload,
        queue_cell_ID_1122_reload,
        queue_cell_ID_1121_reload,
        queue_cell_ID_1120_reload,
        queue_cell_ID_1119_reload,
        queue_cell_ID_1118_reload,
        queue_cell_ID_1117_reload,
        queue_cell_ID_1116_reload,
        queue_cell_ID_1115_reload,
        queue_cell_ID_1114_reload,
        queue_cell_ID_1113_reload,
        queue_cell_ID_1112_reload,
        queue_cell_ID_1111_reload,
        queue_cell_ID_1110_reload,
        queue_cell_ID_1109_reload,
        queue_cell_ID_1108_reload,
        queue_cell_ID_1107_reload,
        queue_cell_ID_1106_reload,
        queue_cell_ID_1105_reload,
        queue_cell_ID_1104_reload,
        queue_cell_ID_1103_reload,
        queue_cell_ID_1102_reload,
        queue_cell_ID_1101_reload,
        queue_cell_ID_1100_reload,
        queue_cell_ID_1099_reload,
        queue_cell_ID_1098_reload,
        queue_cell_ID_1097_reload,
        queue_cell_ID_1096_reload,
        queue_cell_ID_1095_reload,
        queue_offset_1132_reload,
        queue_offset_1131_reload,
        queue_offset_1130_reload,
        queue_offset_1129_reload,
        queue_offset_1128_reload,
        queue_offset_1127_reload,
        queue_offset_1126_reload,
        queue_offset_1125_reload,
        queue_offset_1124_reload,
        queue_offset_1123_reload,
        queue_offset_1122_reload,
        queue_offset_1121_reload,
        queue_offset_1120_reload,
        queue_offset_1119_reload,
        queue_offset_1118_reload,
        queue_offset_1117_reload,
        queue_offset_1116_reload,
        queue_offset_1115_reload,
        queue_offset_1114_reload,
        queue_offset_1113_reload,
        queue_offset_1112_reload,
        queue_offset_1111_reload,
        queue_offset_1110_reload,
        queue_offset_1109_reload,
        queue_offset_1108_reload,
        queue_offset_1107_reload,
        queue_offset_1106_reload,
        queue_offset_1105_reload,
        queue_offset_1104_reload,
        queue_offset_1103_reload,
        queue_offset_1102_reload,
        queue_offset_1101_reload,
        queue_offset_1100_reload,
        queue_offset_1099_reload,
        queue_offset_1098_reload,
        queue_offset_1097_reload,
        queue_offset_1096_reload,
        queue_offset_1095_reload,
        queue_dist_1610_reload,
        queue_dist_1609_reload,
        queue_dist_1608_reload,
        queue_dist_1607_reload,
        queue_dist_1606_reload,
        queue_dist_1605_reload,
        queue_dist_1604_reload,
        queue_dist_1603_reload,
        queue_dist_1602_reload,
        queue_dist_1601_reload,
        queue_dist_1600_reload,
        queue_dist_1599_reload,
        queue_dist_1598_reload,
        queue_dist_1597_reload,
        queue_dist_1596_reload,
        queue_dist_1595_reload,
        queue_dist_1594_reload,
        queue_dist_1593_reload,
        queue_dist_1592_reload,
        queue_dist_1591_reload,
        queue_dist_1590_reload,
        queue_dist_1589_reload,
        queue_dist_1588_reload,
        queue_dist_1587_reload,
        queue_dist_1586_reload,
        queue_dist_1585_reload,
        queue_dist_1584_reload,
        queue_dist_1583_reload,
        queue_dist_1582_reload,
        queue_dist_1581_reload,
        queue_dist_1580_reload,
        queue_dist_1579_reload,
        queue_dist_1578_reload,
        queue_dist_1577_reload,
        queue_dist_1576_reload,
        queue_dist_reload,
        queue_dist_1611_reload,
        queue_dist_1612_reload,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [95:0] s_intermediate_result_with_offset_i_0_din;
input  [3:0] s_intermediate_result_with_offset_i_0_num_data_valid;
input  [3:0] s_intermediate_result_with_offset_i_0_fifo_cap;
input   s_intermediate_result_with_offset_i_0_full_n;
output   s_intermediate_result_with_offset_i_0_write;
input  [31:0] queue_cell_ID_1132_reload;
input  [31:0] queue_cell_ID_1131_reload;
input  [31:0] queue_cell_ID_1130_reload;
input  [31:0] queue_cell_ID_1129_reload;
input  [31:0] queue_cell_ID_1128_reload;
input  [31:0] queue_cell_ID_1127_reload;
input  [31:0] queue_cell_ID_1126_reload;
input  [31:0] queue_cell_ID_1125_reload;
input  [31:0] queue_cell_ID_1124_reload;
input  [31:0] queue_cell_ID_1123_reload;
input  [31:0] queue_cell_ID_1122_reload;
input  [31:0] queue_cell_ID_1121_reload;
input  [31:0] queue_cell_ID_1120_reload;
input  [31:0] queue_cell_ID_1119_reload;
input  [31:0] queue_cell_ID_1118_reload;
input  [31:0] queue_cell_ID_1117_reload;
input  [31:0] queue_cell_ID_1116_reload;
input  [31:0] queue_cell_ID_1115_reload;
input  [31:0] queue_cell_ID_1114_reload;
input  [31:0] queue_cell_ID_1113_reload;
input  [31:0] queue_cell_ID_1112_reload;
input  [31:0] queue_cell_ID_1111_reload;
input  [31:0] queue_cell_ID_1110_reload;
input  [31:0] queue_cell_ID_1109_reload;
input  [31:0] queue_cell_ID_1108_reload;
input  [31:0] queue_cell_ID_1107_reload;
input  [31:0] queue_cell_ID_1106_reload;
input  [31:0] queue_cell_ID_1105_reload;
input  [31:0] queue_cell_ID_1104_reload;
input  [31:0] queue_cell_ID_1103_reload;
input  [31:0] queue_cell_ID_1102_reload;
input  [31:0] queue_cell_ID_1101_reload;
input  [31:0] queue_cell_ID_1100_reload;
input  [31:0] queue_cell_ID_1099_reload;
input  [31:0] queue_cell_ID_1098_reload;
input  [31:0] queue_cell_ID_1097_reload;
input  [31:0] queue_cell_ID_1096_reload;
input  [31:0] queue_cell_ID_1095_reload;
input  [31:0] queue_offset_1132_reload;
input  [31:0] queue_offset_1131_reload;
input  [31:0] queue_offset_1130_reload;
input  [31:0] queue_offset_1129_reload;
input  [31:0] queue_offset_1128_reload;
input  [31:0] queue_offset_1127_reload;
input  [31:0] queue_offset_1126_reload;
input  [31:0] queue_offset_1125_reload;
input  [31:0] queue_offset_1124_reload;
input  [31:0] queue_offset_1123_reload;
input  [31:0] queue_offset_1122_reload;
input  [31:0] queue_offset_1121_reload;
input  [31:0] queue_offset_1120_reload;
input  [31:0] queue_offset_1119_reload;
input  [31:0] queue_offset_1118_reload;
input  [31:0] queue_offset_1117_reload;
input  [31:0] queue_offset_1116_reload;
input  [31:0] queue_offset_1115_reload;
input  [31:0] queue_offset_1114_reload;
input  [31:0] queue_offset_1113_reload;
input  [31:0] queue_offset_1112_reload;
input  [31:0] queue_offset_1111_reload;
input  [31:0] queue_offset_1110_reload;
input  [31:0] queue_offset_1109_reload;
input  [31:0] queue_offset_1108_reload;
input  [31:0] queue_offset_1107_reload;
input  [31:0] queue_offset_1106_reload;
input  [31:0] queue_offset_1105_reload;
input  [31:0] queue_offset_1104_reload;
input  [31:0] queue_offset_1103_reload;
input  [31:0] queue_offset_1102_reload;
input  [31:0] queue_offset_1101_reload;
input  [31:0] queue_offset_1100_reload;
input  [31:0] queue_offset_1099_reload;
input  [31:0] queue_offset_1098_reload;
input  [31:0] queue_offset_1097_reload;
input  [31:0] queue_offset_1096_reload;
input  [31:0] queue_offset_1095_reload;
input  [31:0] queue_dist_1610_reload;
input  [31:0] queue_dist_1609_reload;
input  [31:0] queue_dist_1608_reload;
input  [31:0] queue_dist_1607_reload;
input  [31:0] queue_dist_1606_reload;
input  [31:0] queue_dist_1605_reload;
input  [31:0] queue_dist_1604_reload;
input  [31:0] queue_dist_1603_reload;
input  [31:0] queue_dist_1602_reload;
input  [31:0] queue_dist_1601_reload;
input  [31:0] queue_dist_1600_reload;
input  [31:0] queue_dist_1599_reload;
input  [31:0] queue_dist_1598_reload;
input  [31:0] queue_dist_1597_reload;
input  [31:0] queue_dist_1596_reload;
input  [31:0] queue_dist_1595_reload;
input  [31:0] queue_dist_1594_reload;
input  [31:0] queue_dist_1593_reload;
input  [31:0] queue_dist_1592_reload;
input  [31:0] queue_dist_1591_reload;
input  [31:0] queue_dist_1590_reload;
input  [31:0] queue_dist_1589_reload;
input  [31:0] queue_dist_1588_reload;
input  [31:0] queue_dist_1587_reload;
input  [31:0] queue_dist_1586_reload;
input  [31:0] queue_dist_1585_reload;
input  [31:0] queue_dist_1584_reload;
input  [31:0] queue_dist_1583_reload;
input  [31:0] queue_dist_1582_reload;
input  [31:0] queue_dist_1581_reload;
input  [31:0] queue_dist_1580_reload;
input  [31:0] queue_dist_1579_reload;
input  [31:0] queue_dist_1578_reload;
input  [31:0] queue_dist_1577_reload;
input  [31:0] queue_dist_1576_reload;
input  [31:0] queue_dist_reload;
input  [31:0] queue_dist_1611_reload;
input  [31:0] queue_dist_1612_reload;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg s_intermediate_result_with_offset_i_0_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln55_fu_975_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    s_intermediate_result_with_offset_i_0_blk_n;
wire    ap_block_pp0_stage0;
wire   [31:0] tmp_fu_981_p41;
reg   [31:0] tmp_reg_1266;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] tmp_s_fu_1065_p41;
reg   [31:0] tmp_s_reg_1271;
wire   [31:0] tmp_7_fu_1149_p41;
reg   [31:0] tmp_7_reg_1276;
reg   [5:0] i_fu_272;
wire   [5:0] add_ln55_fu_1233_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_15;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln174_fu_1244_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U5203(
    .din0(32'd0),
    .din1(queue_cell_ID_1132_reload),
    .din2(queue_cell_ID_1131_reload),
    .din3(queue_cell_ID_1130_reload),
    .din4(queue_cell_ID_1129_reload),
    .din5(queue_cell_ID_1128_reload),
    .din6(queue_cell_ID_1127_reload),
    .din7(queue_cell_ID_1126_reload),
    .din8(queue_cell_ID_1125_reload),
    .din9(queue_cell_ID_1124_reload),
    .din10(queue_cell_ID_1123_reload),
    .din11(queue_cell_ID_1122_reload),
    .din12(queue_cell_ID_1121_reload),
    .din13(queue_cell_ID_1120_reload),
    .din14(queue_cell_ID_1119_reload),
    .din15(queue_cell_ID_1118_reload),
    .din16(queue_cell_ID_1117_reload),
    .din17(queue_cell_ID_1116_reload),
    .din18(queue_cell_ID_1115_reload),
    .din19(queue_cell_ID_1114_reload),
    .din20(queue_cell_ID_1113_reload),
    .din21(queue_cell_ID_1112_reload),
    .din22(queue_cell_ID_1111_reload),
    .din23(queue_cell_ID_1110_reload),
    .din24(queue_cell_ID_1109_reload),
    .din25(queue_cell_ID_1108_reload),
    .din26(queue_cell_ID_1107_reload),
    .din27(queue_cell_ID_1106_reload),
    .din28(queue_cell_ID_1105_reload),
    .din29(queue_cell_ID_1104_reload),
    .din30(queue_cell_ID_1103_reload),
    .din31(queue_cell_ID_1102_reload),
    .din32(queue_cell_ID_1101_reload),
    .din33(queue_cell_ID_1100_reload),
    .din34(queue_cell_ID_1099_reload),
    .din35(queue_cell_ID_1098_reload),
    .din36(queue_cell_ID_1097_reload),
    .din37(queue_cell_ID_1096_reload),
    .din38(queue_cell_ID_1095_reload),
    .din39(ap_sig_allocacmp_i_15),
    .dout(tmp_fu_981_p41)
);

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U5204(
    .din0(32'd0),
    .din1(queue_offset_1132_reload),
    .din2(queue_offset_1131_reload),
    .din3(queue_offset_1130_reload),
    .din4(queue_offset_1129_reload),
    .din5(queue_offset_1128_reload),
    .din6(queue_offset_1127_reload),
    .din7(queue_offset_1126_reload),
    .din8(queue_offset_1125_reload),
    .din9(queue_offset_1124_reload),
    .din10(queue_offset_1123_reload),
    .din11(queue_offset_1122_reload),
    .din12(queue_offset_1121_reload),
    .din13(queue_offset_1120_reload),
    .din14(queue_offset_1119_reload),
    .din15(queue_offset_1118_reload),
    .din16(queue_offset_1117_reload),
    .din17(queue_offset_1116_reload),
    .din18(queue_offset_1115_reload),
    .din19(queue_offset_1114_reload),
    .din20(queue_offset_1113_reload),
    .din21(queue_offset_1112_reload),
    .din22(queue_offset_1111_reload),
    .din23(queue_offset_1110_reload),
    .din24(queue_offset_1109_reload),
    .din25(queue_offset_1108_reload),
    .din26(queue_offset_1107_reload),
    .din27(queue_offset_1106_reload),
    .din28(queue_offset_1105_reload),
    .din29(queue_offset_1104_reload),
    .din30(queue_offset_1103_reload),
    .din31(queue_offset_1102_reload),
    .din32(queue_offset_1101_reload),
    .din33(queue_offset_1100_reload),
    .din34(queue_offset_1099_reload),
    .din35(queue_offset_1098_reload),
    .din36(queue_offset_1097_reload),
    .din37(queue_offset_1096_reload),
    .din38(queue_offset_1095_reload),
    .din39(ap_sig_allocacmp_i_15),
    .dout(tmp_s_fu_1065_p41)
);

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U5205(
    .din0(32'd0),
    .din1(queue_dist_1610_reload),
    .din2(queue_dist_1609_reload),
    .din3(queue_dist_1608_reload),
    .din4(queue_dist_1607_reload),
    .din5(queue_dist_1606_reload),
    .din6(queue_dist_1605_reload),
    .din7(queue_dist_1604_reload),
    .din8(queue_dist_1603_reload),
    .din9(queue_dist_1602_reload),
    .din10(queue_dist_1601_reload),
    .din11(queue_dist_1600_reload),
    .din12(queue_dist_1599_reload),
    .din13(queue_dist_1598_reload),
    .din14(queue_dist_1597_reload),
    .din15(queue_dist_1596_reload),
    .din16(queue_dist_1595_reload),
    .din17(queue_dist_1594_reload),
    .din18(queue_dist_1593_reload),
    .din19(queue_dist_1592_reload),
    .din20(queue_dist_1591_reload),
    .din21(queue_dist_1590_reload),
    .din22(queue_dist_1589_reload),
    .din23(queue_dist_1588_reload),
    .din24(queue_dist_1587_reload),
    .din25(queue_dist_1586_reload),
    .din26(queue_dist_1585_reload),
    .din27(queue_dist_1584_reload),
    .din28(queue_dist_1583_reload),
    .din29(queue_dist_1582_reload),
    .din30(queue_dist_1581_reload),
    .din31(queue_dist_1580_reload),
    .din32(queue_dist_1579_reload),
    .din33(queue_dist_1578_reload),
    .din34(queue_dist_1577_reload),
    .din35(queue_dist_1576_reload),
    .din36(queue_dist_reload),
    .din37(queue_dist_1611_reload),
    .din38(queue_dist_1612_reload),
    .din39(ap_sig_allocacmp_i_15),
    .dout(tmp_7_fu_1149_p41)
);

vadd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln55_fu_975_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_272 <= add_ln55_fu_1233_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_272 <= 6'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_975_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_7_reg_1276 <= tmp_7_fu_1149_p41;
        tmp_reg_1266 <= tmp_fu_981_p41;
        tmp_s_reg_1271 <= tmp_s_fu_1065_p41;
    end
end

always @ (*) begin
    if (((icmp_ln55_fu_975_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_15 = 6'd1;
    end else begin
        ap_sig_allocacmp_i_15 = i_fu_272;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_intermediate_result_with_offset_i_0_blk_n = s_intermediate_result_with_offset_i_0_full_n;
    end else begin
        s_intermediate_result_with_offset_i_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_intermediate_result_with_offset_i_0_write = 1'b1;
    end else begin
        s_intermediate_result_with_offset_i_0_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_1233_p2 = (ap_sig_allocacmp_i_15 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((s_intermediate_result_with_offset_i_0_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((s_intermediate_result_with_offset_i_0_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((s_intermediate_result_with_offset_i_0_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (s_intermediate_result_with_offset_i_0_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = s_intermediate_result_with_offset_i_0_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bitcast_ln174_fu_1244_p1 = tmp_7_reg_1276;

assign icmp_ln55_fu_975_p2 = ((ap_sig_allocacmp_i_15 == 6'd39) ? 1'b1 : 1'b0);

assign s_intermediate_result_with_offset_i_0_din = {{{bitcast_ln174_fu_1244_p1}, {tmp_s_reg_1271}}, {tmp_reg_1266}};

endmodule //vadd_insert_wrapper_1_Pipeline_VITIS_LOOP_55_4
