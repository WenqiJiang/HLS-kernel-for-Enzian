// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vadd_get_cell_addr_and_size_Pipeline_VITIS_LOOP_68_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_nlist_PQ_codes_start_addr69_dout,
        s_nlist_PQ_codes_start_addr69_num_data_valid,
        s_nlist_PQ_codes_start_addr69_fifo_cap,
        s_nlist_PQ_codes_start_addr69_empty_n,
        s_nlist_PQ_codes_start_addr69_read,
        s_nlist_num_vecs71_dout,
        s_nlist_num_vecs71_num_data_valid,
        s_nlist_num_vecs71_fifo_cap,
        s_nlist_num_vecs71_empty_n,
        s_nlist_num_vecs71_read,
        nlist_load,
        cell_ID_to_addr_address1,
        cell_ID_to_addr_ce1,
        cell_ID_to_addr_we1,
        cell_ID_to_addr_d1,
        cell_ID_to_num_vecs_address1,
        cell_ID_to_num_vecs_ce1,
        cell_ID_to_num_vecs_we1,
        cell_ID_to_num_vecs_d1,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] s_nlist_PQ_codes_start_addr69_dout;
input  [8:0] s_nlist_PQ_codes_start_addr69_num_data_valid;
input  [8:0] s_nlist_PQ_codes_start_addr69_fifo_cap;
input   s_nlist_PQ_codes_start_addr69_empty_n;
output   s_nlist_PQ_codes_start_addr69_read;
input  [31:0] s_nlist_num_vecs71_dout;
input  [8:0] s_nlist_num_vecs71_num_data_valid;
input  [8:0] s_nlist_num_vecs71_fifo_cap;
input   s_nlist_num_vecs71_empty_n;
output   s_nlist_num_vecs71_read;
input  [31:0] nlist_load;
output  [15:0] cell_ID_to_addr_address1;
output   cell_ID_to_addr_ce1;
output   cell_ID_to_addr_we1;
output  [31:0] cell_ID_to_addr_d1;
output  [15:0] cell_ID_to_num_vecs_address1;
output   cell_ID_to_num_vecs_ce1;
output   cell_ID_to_num_vecs_we1;
output  [31:0] cell_ID_to_num_vecs_d1;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg s_nlist_PQ_codes_start_addr69_read;
reg s_nlist_num_vecs71_read;
reg cell_ID_to_addr_ce1;
reg cell_ID_to_addr_we1;
reg cell_ID_to_num_vecs_ce1;
reg cell_ID_to_num_vecs_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln68_fu_110_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    s_nlist_PQ_codes_start_addr69_blk_n;
wire    ap_block_pp0_stage0;
reg    s_nlist_num_vecs71_blk_n;
reg   [31:0] i_16_reg_139;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] i_cast_fu_127_p1;
reg   [31:0] i_fu_44;
wire   [31:0] add_ln68_fu_116_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_i_16;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

vadd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln68_fu_110_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_44 <= add_ln68_fu_116_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_44 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_16_reg_139 <= ap_sig_allocacmp_i_16;
    end
end

always @ (*) begin
    if (((icmp_ln68_fu_110_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_16 = 32'd0;
    end else begin
        ap_sig_allocacmp_i_16 = i_fu_44;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cell_ID_to_addr_ce1 = 1'b1;
    end else begin
        cell_ID_to_addr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cell_ID_to_addr_we1 = 1'b1;
    end else begin
        cell_ID_to_addr_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cell_ID_to_num_vecs_ce1 = 1'b1;
    end else begin
        cell_ID_to_num_vecs_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cell_ID_to_num_vecs_we1 = 1'b1;
    end else begin
        cell_ID_to_num_vecs_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_nlist_PQ_codes_start_addr69_blk_n = s_nlist_PQ_codes_start_addr69_empty_n;
    end else begin
        s_nlist_PQ_codes_start_addr69_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_nlist_PQ_codes_start_addr69_read = 1'b1;
    end else begin
        s_nlist_PQ_codes_start_addr69_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_nlist_num_vecs71_blk_n = s_nlist_num_vecs71_empty_n;
    end else begin
        s_nlist_num_vecs71_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_nlist_num_vecs71_read = 1'b1;
    end else begin
        s_nlist_num_vecs71_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln68_fu_116_p2 = (ap_sig_allocacmp_i_16 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((s_nlist_num_vecs71_empty_n == 1'b0) | (s_nlist_PQ_codes_start_addr69_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((s_nlist_num_vecs71_empty_n == 1'b0) | (s_nlist_PQ_codes_start_addr69_empty_n == 1'b0)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((s_nlist_num_vecs71_empty_n == 1'b0) | (s_nlist_PQ_codes_start_addr69_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = (s_nlist_num_vecs71_blk_n & s_nlist_PQ_codes_start_addr69_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign cell_ID_to_addr_address1 = i_cast_fu_127_p1;

assign cell_ID_to_addr_d1 = s_nlist_PQ_codes_start_addr69_dout;

assign cell_ID_to_num_vecs_address1 = i_cast_fu_127_p1;

assign cell_ID_to_num_vecs_d1 = s_nlist_num_vecs71_dout;

assign i_cast_fu_127_p1 = i_16_reg_139;

assign icmp_ln68_fu_110_p2 = ((ap_sig_allocacmp_i_16 == nlist_load) ? 1'b1 : 1'b0);

endmodule //vadd_get_cell_addr_and_size_Pipeline_VITIS_LOOP_68_1
