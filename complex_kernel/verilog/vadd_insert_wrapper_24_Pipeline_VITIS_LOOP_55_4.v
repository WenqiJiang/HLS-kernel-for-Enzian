// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vadd_insert_wrapper_24_Pipeline_VITIS_LOOP_55_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_intermediate_result_with_offset_i_3_din,
        s_intermediate_result_with_offset_i_3_num_data_valid,
        s_intermediate_result_with_offset_i_3_fifo_cap,
        s_intermediate_result_with_offset_i_3_full_n,
        s_intermediate_result_with_offset_i_3_write,
        queue_cell_ID_679_reload,
        queue_cell_ID_678_reload,
        queue_cell_ID_677_reload,
        queue_cell_ID_676_reload,
        queue_cell_ID_675_reload,
        queue_cell_ID_674_reload,
        queue_cell_ID_673_reload,
        queue_cell_ID_672_reload,
        queue_cell_ID_671_reload,
        queue_cell_ID_670_reload,
        queue_cell_ID_669_reload,
        queue_cell_ID_668_reload,
        queue_cell_ID_667_reload,
        queue_cell_ID_666_reload,
        queue_cell_ID_665_reload,
        queue_cell_ID_664_reload,
        queue_cell_ID_663_reload,
        queue_cell_ID_662_reload,
        queue_cell_ID_661_reload,
        queue_cell_ID_660_reload,
        queue_cell_ID_659_reload,
        queue_cell_ID_658_reload,
        queue_cell_ID_657_reload,
        queue_cell_ID_656_reload,
        queue_cell_ID_655_reload,
        queue_cell_ID_654_reload,
        queue_cell_ID_653_reload,
        queue_cell_ID_652_reload,
        queue_cell_ID_651_reload,
        queue_cell_ID_650_reload,
        queue_cell_ID_649_reload,
        queue_cell_ID_648_reload,
        queue_cell_ID_647_reload,
        queue_cell_ID_646_reload,
        queue_cell_ID_645_reload,
        queue_cell_ID_644_reload,
        queue_cell_ID_643_reload,
        queue_cell_ID_642_reload,
        queue_offset_679_reload,
        queue_offset_678_reload,
        queue_offset_677_reload,
        queue_offset_676_reload,
        queue_offset_675_reload,
        queue_offset_674_reload,
        queue_offset_673_reload,
        queue_offset_672_reload,
        queue_offset_671_reload,
        queue_offset_670_reload,
        queue_offset_669_reload,
        queue_offset_668_reload,
        queue_offset_667_reload,
        queue_offset_666_reload,
        queue_offset_665_reload,
        queue_offset_664_reload,
        queue_offset_663_reload,
        queue_offset_662_reload,
        queue_offset_661_reload,
        queue_offset_660_reload,
        queue_offset_659_reload,
        queue_offset_658_reload,
        queue_offset_657_reload,
        queue_offset_656_reload,
        queue_offset_655_reload,
        queue_offset_654_reload,
        queue_offset_653_reload,
        queue_offset_652_reload,
        queue_offset_651_reload,
        queue_offset_650_reload,
        queue_offset_649_reload,
        queue_offset_648_reload,
        queue_offset_647_reload,
        queue_offset_646_reload,
        queue_offset_645_reload,
        queue_offset_644_reload,
        queue_offset_643_reload,
        queue_offset_642_reload,
        queue_dist_935_reload,
        queue_dist_934_reload,
        queue_dist_933_reload,
        queue_dist_932_reload,
        queue_dist_931_reload,
        queue_dist_930_reload,
        queue_dist_929_reload,
        queue_dist_928_reload,
        queue_dist_927_reload,
        queue_dist_926_reload,
        queue_dist_925_reload,
        queue_dist_924_reload,
        queue_dist_923_reload,
        queue_dist_922_reload,
        queue_dist_921_reload,
        queue_dist_920_reload,
        queue_dist_919_reload,
        queue_dist_918_reload,
        queue_dist_917_reload,
        queue_dist_916_reload,
        queue_dist_915_reload,
        queue_dist_914_reload,
        queue_dist_913_reload,
        queue_dist_912_reload,
        queue_dist_911_reload,
        queue_dist_910_reload,
        queue_dist_909_reload,
        queue_dist_908_reload,
        queue_dist_907_reload,
        queue_dist_906_reload,
        queue_dist_905_reload,
        queue_dist_904_reload,
        queue_dist_903_reload,
        queue_dist_902_reload,
        queue_dist_901_reload,
        queue_dist_reload,
        queue_dist_936_reload,
        queue_dist_937_reload,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [95:0] s_intermediate_result_with_offset_i_3_din;
input  [3:0] s_intermediate_result_with_offset_i_3_num_data_valid;
input  [3:0] s_intermediate_result_with_offset_i_3_fifo_cap;
input   s_intermediate_result_with_offset_i_3_full_n;
output   s_intermediate_result_with_offset_i_3_write;
input  [31:0] queue_cell_ID_679_reload;
input  [31:0] queue_cell_ID_678_reload;
input  [31:0] queue_cell_ID_677_reload;
input  [31:0] queue_cell_ID_676_reload;
input  [31:0] queue_cell_ID_675_reload;
input  [31:0] queue_cell_ID_674_reload;
input  [31:0] queue_cell_ID_673_reload;
input  [31:0] queue_cell_ID_672_reload;
input  [31:0] queue_cell_ID_671_reload;
input  [31:0] queue_cell_ID_670_reload;
input  [31:0] queue_cell_ID_669_reload;
input  [31:0] queue_cell_ID_668_reload;
input  [31:0] queue_cell_ID_667_reload;
input  [31:0] queue_cell_ID_666_reload;
input  [31:0] queue_cell_ID_665_reload;
input  [31:0] queue_cell_ID_664_reload;
input  [31:0] queue_cell_ID_663_reload;
input  [31:0] queue_cell_ID_662_reload;
input  [31:0] queue_cell_ID_661_reload;
input  [31:0] queue_cell_ID_660_reload;
input  [31:0] queue_cell_ID_659_reload;
input  [31:0] queue_cell_ID_658_reload;
input  [31:0] queue_cell_ID_657_reload;
input  [31:0] queue_cell_ID_656_reload;
input  [31:0] queue_cell_ID_655_reload;
input  [31:0] queue_cell_ID_654_reload;
input  [31:0] queue_cell_ID_653_reload;
input  [31:0] queue_cell_ID_652_reload;
input  [31:0] queue_cell_ID_651_reload;
input  [31:0] queue_cell_ID_650_reload;
input  [31:0] queue_cell_ID_649_reload;
input  [31:0] queue_cell_ID_648_reload;
input  [31:0] queue_cell_ID_647_reload;
input  [31:0] queue_cell_ID_646_reload;
input  [31:0] queue_cell_ID_645_reload;
input  [31:0] queue_cell_ID_644_reload;
input  [31:0] queue_cell_ID_643_reload;
input  [31:0] queue_cell_ID_642_reload;
input  [31:0] queue_offset_679_reload;
input  [31:0] queue_offset_678_reload;
input  [31:0] queue_offset_677_reload;
input  [31:0] queue_offset_676_reload;
input  [31:0] queue_offset_675_reload;
input  [31:0] queue_offset_674_reload;
input  [31:0] queue_offset_673_reload;
input  [31:0] queue_offset_672_reload;
input  [31:0] queue_offset_671_reload;
input  [31:0] queue_offset_670_reload;
input  [31:0] queue_offset_669_reload;
input  [31:0] queue_offset_668_reload;
input  [31:0] queue_offset_667_reload;
input  [31:0] queue_offset_666_reload;
input  [31:0] queue_offset_665_reload;
input  [31:0] queue_offset_664_reload;
input  [31:0] queue_offset_663_reload;
input  [31:0] queue_offset_662_reload;
input  [31:0] queue_offset_661_reload;
input  [31:0] queue_offset_660_reload;
input  [31:0] queue_offset_659_reload;
input  [31:0] queue_offset_658_reload;
input  [31:0] queue_offset_657_reload;
input  [31:0] queue_offset_656_reload;
input  [31:0] queue_offset_655_reload;
input  [31:0] queue_offset_654_reload;
input  [31:0] queue_offset_653_reload;
input  [31:0] queue_offset_652_reload;
input  [31:0] queue_offset_651_reload;
input  [31:0] queue_offset_650_reload;
input  [31:0] queue_offset_649_reload;
input  [31:0] queue_offset_648_reload;
input  [31:0] queue_offset_647_reload;
input  [31:0] queue_offset_646_reload;
input  [31:0] queue_offset_645_reload;
input  [31:0] queue_offset_644_reload;
input  [31:0] queue_offset_643_reload;
input  [31:0] queue_offset_642_reload;
input  [31:0] queue_dist_935_reload;
input  [31:0] queue_dist_934_reload;
input  [31:0] queue_dist_933_reload;
input  [31:0] queue_dist_932_reload;
input  [31:0] queue_dist_931_reload;
input  [31:0] queue_dist_930_reload;
input  [31:0] queue_dist_929_reload;
input  [31:0] queue_dist_928_reload;
input  [31:0] queue_dist_927_reload;
input  [31:0] queue_dist_926_reload;
input  [31:0] queue_dist_925_reload;
input  [31:0] queue_dist_924_reload;
input  [31:0] queue_dist_923_reload;
input  [31:0] queue_dist_922_reload;
input  [31:0] queue_dist_921_reload;
input  [31:0] queue_dist_920_reload;
input  [31:0] queue_dist_919_reload;
input  [31:0] queue_dist_918_reload;
input  [31:0] queue_dist_917_reload;
input  [31:0] queue_dist_916_reload;
input  [31:0] queue_dist_915_reload;
input  [31:0] queue_dist_914_reload;
input  [31:0] queue_dist_913_reload;
input  [31:0] queue_dist_912_reload;
input  [31:0] queue_dist_911_reload;
input  [31:0] queue_dist_910_reload;
input  [31:0] queue_dist_909_reload;
input  [31:0] queue_dist_908_reload;
input  [31:0] queue_dist_907_reload;
input  [31:0] queue_dist_906_reload;
input  [31:0] queue_dist_905_reload;
input  [31:0] queue_dist_904_reload;
input  [31:0] queue_dist_903_reload;
input  [31:0] queue_dist_902_reload;
input  [31:0] queue_dist_901_reload;
input  [31:0] queue_dist_reload;
input  [31:0] queue_dist_936_reload;
input  [31:0] queue_dist_937_reload;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg s_intermediate_result_with_offset_i_3_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln55_fu_975_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    s_intermediate_result_with_offset_i_3_blk_n;
wire    ap_block_pp0_stage0;
wire   [31:0] tmp_fu_981_p41;
reg   [31:0] tmp_reg_1266;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] tmp_s_fu_1065_p41;
reg   [31:0] tmp_s_reg_1271;
wire   [31:0] tmp_4_fu_1149_p41;
reg   [31:0] tmp_4_reg_1276;
reg   [5:0] i_fu_272;
wire   [5:0] add_ln55_fu_1233_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_12;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln174_fu_1244_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U6203(
    .din0(32'd0),
    .din1(queue_cell_ID_679_reload),
    .din2(queue_cell_ID_678_reload),
    .din3(queue_cell_ID_677_reload),
    .din4(queue_cell_ID_676_reload),
    .din5(queue_cell_ID_675_reload),
    .din6(queue_cell_ID_674_reload),
    .din7(queue_cell_ID_673_reload),
    .din8(queue_cell_ID_672_reload),
    .din9(queue_cell_ID_671_reload),
    .din10(queue_cell_ID_670_reload),
    .din11(queue_cell_ID_669_reload),
    .din12(queue_cell_ID_668_reload),
    .din13(queue_cell_ID_667_reload),
    .din14(queue_cell_ID_666_reload),
    .din15(queue_cell_ID_665_reload),
    .din16(queue_cell_ID_664_reload),
    .din17(queue_cell_ID_663_reload),
    .din18(queue_cell_ID_662_reload),
    .din19(queue_cell_ID_661_reload),
    .din20(queue_cell_ID_660_reload),
    .din21(queue_cell_ID_659_reload),
    .din22(queue_cell_ID_658_reload),
    .din23(queue_cell_ID_657_reload),
    .din24(queue_cell_ID_656_reload),
    .din25(queue_cell_ID_655_reload),
    .din26(queue_cell_ID_654_reload),
    .din27(queue_cell_ID_653_reload),
    .din28(queue_cell_ID_652_reload),
    .din29(queue_cell_ID_651_reload),
    .din30(queue_cell_ID_650_reload),
    .din31(queue_cell_ID_649_reload),
    .din32(queue_cell_ID_648_reload),
    .din33(queue_cell_ID_647_reload),
    .din34(queue_cell_ID_646_reload),
    .din35(queue_cell_ID_645_reload),
    .din36(queue_cell_ID_644_reload),
    .din37(queue_cell_ID_643_reload),
    .din38(queue_cell_ID_642_reload),
    .din39(ap_sig_allocacmp_i_12),
    .dout(tmp_fu_981_p41)
);

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U6204(
    .din0(32'd0),
    .din1(queue_offset_679_reload),
    .din2(queue_offset_678_reload),
    .din3(queue_offset_677_reload),
    .din4(queue_offset_676_reload),
    .din5(queue_offset_675_reload),
    .din6(queue_offset_674_reload),
    .din7(queue_offset_673_reload),
    .din8(queue_offset_672_reload),
    .din9(queue_offset_671_reload),
    .din10(queue_offset_670_reload),
    .din11(queue_offset_669_reload),
    .din12(queue_offset_668_reload),
    .din13(queue_offset_667_reload),
    .din14(queue_offset_666_reload),
    .din15(queue_offset_665_reload),
    .din16(queue_offset_664_reload),
    .din17(queue_offset_663_reload),
    .din18(queue_offset_662_reload),
    .din19(queue_offset_661_reload),
    .din20(queue_offset_660_reload),
    .din21(queue_offset_659_reload),
    .din22(queue_offset_658_reload),
    .din23(queue_offset_657_reload),
    .din24(queue_offset_656_reload),
    .din25(queue_offset_655_reload),
    .din26(queue_offset_654_reload),
    .din27(queue_offset_653_reload),
    .din28(queue_offset_652_reload),
    .din29(queue_offset_651_reload),
    .din30(queue_offset_650_reload),
    .din31(queue_offset_649_reload),
    .din32(queue_offset_648_reload),
    .din33(queue_offset_647_reload),
    .din34(queue_offset_646_reload),
    .din35(queue_offset_645_reload),
    .din36(queue_offset_644_reload),
    .din37(queue_offset_643_reload),
    .din38(queue_offset_642_reload),
    .din39(ap_sig_allocacmp_i_12),
    .dout(tmp_s_fu_1065_p41)
);

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U6205(
    .din0(32'd0),
    .din1(queue_dist_935_reload),
    .din2(queue_dist_934_reload),
    .din3(queue_dist_933_reload),
    .din4(queue_dist_932_reload),
    .din5(queue_dist_931_reload),
    .din6(queue_dist_930_reload),
    .din7(queue_dist_929_reload),
    .din8(queue_dist_928_reload),
    .din9(queue_dist_927_reload),
    .din10(queue_dist_926_reload),
    .din11(queue_dist_925_reload),
    .din12(queue_dist_924_reload),
    .din13(queue_dist_923_reload),
    .din14(queue_dist_922_reload),
    .din15(queue_dist_921_reload),
    .din16(queue_dist_920_reload),
    .din17(queue_dist_919_reload),
    .din18(queue_dist_918_reload),
    .din19(queue_dist_917_reload),
    .din20(queue_dist_916_reload),
    .din21(queue_dist_915_reload),
    .din22(queue_dist_914_reload),
    .din23(queue_dist_913_reload),
    .din24(queue_dist_912_reload),
    .din25(queue_dist_911_reload),
    .din26(queue_dist_910_reload),
    .din27(queue_dist_909_reload),
    .din28(queue_dist_908_reload),
    .din29(queue_dist_907_reload),
    .din30(queue_dist_906_reload),
    .din31(queue_dist_905_reload),
    .din32(queue_dist_904_reload),
    .din33(queue_dist_903_reload),
    .din34(queue_dist_902_reload),
    .din35(queue_dist_901_reload),
    .din36(queue_dist_reload),
    .din37(queue_dist_936_reload),
    .din38(queue_dist_937_reload),
    .din39(ap_sig_allocacmp_i_12),
    .dout(tmp_4_fu_1149_p41)
);

vadd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln55_fu_975_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_272 <= add_ln55_fu_1233_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_272 <= 6'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_975_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_4_reg_1276 <= tmp_4_fu_1149_p41;
        tmp_reg_1266 <= tmp_fu_981_p41;
        tmp_s_reg_1271 <= tmp_s_fu_1065_p41;
    end
end

always @ (*) begin
    if (((icmp_ln55_fu_975_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_12 = 6'd1;
    end else begin
        ap_sig_allocacmp_i_12 = i_fu_272;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_intermediate_result_with_offset_i_3_blk_n = s_intermediate_result_with_offset_i_3_full_n;
    end else begin
        s_intermediate_result_with_offset_i_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_intermediate_result_with_offset_i_3_write = 1'b1;
    end else begin
        s_intermediate_result_with_offset_i_3_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_1233_p2 = (ap_sig_allocacmp_i_12 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((s_intermediate_result_with_offset_i_3_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((s_intermediate_result_with_offset_i_3_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((s_intermediate_result_with_offset_i_3_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (s_intermediate_result_with_offset_i_3_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = s_intermediate_result_with_offset_i_3_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bitcast_ln174_fu_1244_p1 = tmp_4_reg_1276;

assign icmp_ln55_fu_975_p2 = ((ap_sig_allocacmp_i_12 == 6'd39) ? 1'b1 : 1'b0);

assign s_intermediate_result_with_offset_i_3_din = {{{bitcast_ln174_fu_1244_p1}, {tmp_s_reg_1271}}, {tmp_reg_1266}};

endmodule //vadd_insert_wrapper_24_Pipeline_VITIS_LOOP_55_4
