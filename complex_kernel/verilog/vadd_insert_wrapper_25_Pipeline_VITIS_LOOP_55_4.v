// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module vadd_insert_wrapper_25_Pipeline_VITIS_LOOP_55_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_intermediate_result_with_offset_i_4_din,
        s_intermediate_result_with_offset_i_4_num_data_valid,
        s_intermediate_result_with_offset_i_4_fifo_cap,
        s_intermediate_result_with_offset_i_4_full_n,
        s_intermediate_result_with_offset_i_4_write,
        queue_cell_ID_528_reload,
        queue_cell_ID_527_reload,
        queue_cell_ID_526_reload,
        queue_cell_ID_525_reload,
        queue_cell_ID_524_reload,
        queue_cell_ID_523_reload,
        queue_cell_ID_522_reload,
        queue_cell_ID_521_reload,
        queue_cell_ID_520_reload,
        queue_cell_ID_519_reload,
        queue_cell_ID_518_reload,
        queue_cell_ID_517_reload,
        queue_cell_ID_516_reload,
        queue_cell_ID_515_reload,
        queue_cell_ID_514_reload,
        queue_cell_ID_513_reload,
        queue_cell_ID_512_reload,
        queue_cell_ID_511_reload,
        queue_cell_ID_510_reload,
        queue_cell_ID_509_reload,
        queue_cell_ID_508_reload,
        queue_cell_ID_507_reload,
        queue_cell_ID_506_reload,
        queue_cell_ID_505_reload,
        queue_cell_ID_504_reload,
        queue_cell_ID_503_reload,
        queue_cell_ID_502_reload,
        queue_cell_ID_501_reload,
        queue_cell_ID_500_reload,
        queue_cell_ID_499_reload,
        queue_cell_ID_498_reload,
        queue_cell_ID_497_reload,
        queue_cell_ID_496_reload,
        queue_cell_ID_495_reload,
        queue_cell_ID_494_reload,
        queue_cell_ID_493_reload,
        queue_cell_ID_492_reload,
        queue_cell_ID_491_reload,
        queue_offset_528_reload,
        queue_offset_527_reload,
        queue_offset_526_reload,
        queue_offset_525_reload,
        queue_offset_524_reload,
        queue_offset_523_reload,
        queue_offset_522_reload,
        queue_offset_521_reload,
        queue_offset_520_reload,
        queue_offset_519_reload,
        queue_offset_518_reload,
        queue_offset_517_reload,
        queue_offset_516_reload,
        queue_offset_515_reload,
        queue_offset_514_reload,
        queue_offset_513_reload,
        queue_offset_512_reload,
        queue_offset_511_reload,
        queue_offset_510_reload,
        queue_offset_509_reload,
        queue_offset_508_reload,
        queue_offset_507_reload,
        queue_offset_506_reload,
        queue_offset_505_reload,
        queue_offset_504_reload,
        queue_offset_503_reload,
        queue_offset_502_reload,
        queue_offset_501_reload,
        queue_offset_500_reload,
        queue_offset_499_reload,
        queue_offset_498_reload,
        queue_offset_497_reload,
        queue_offset_496_reload,
        queue_offset_495_reload,
        queue_offset_494_reload,
        queue_offset_493_reload,
        queue_offset_492_reload,
        queue_offset_491_reload,
        queue_dist_710_reload,
        queue_dist_709_reload,
        queue_dist_708_reload,
        queue_dist_707_reload,
        queue_dist_706_reload,
        queue_dist_705_reload,
        queue_dist_704_reload,
        queue_dist_703_reload,
        queue_dist_702_reload,
        queue_dist_701_reload,
        queue_dist_700_reload,
        queue_dist_699_reload,
        queue_dist_698_reload,
        queue_dist_697_reload,
        queue_dist_696_reload,
        queue_dist_695_reload,
        queue_dist_694_reload,
        queue_dist_693_reload,
        queue_dist_692_reload,
        queue_dist_691_reload,
        queue_dist_690_reload,
        queue_dist_689_reload,
        queue_dist_688_reload,
        queue_dist_687_reload,
        queue_dist_686_reload,
        queue_dist_685_reload,
        queue_dist_684_reload,
        queue_dist_683_reload,
        queue_dist_682_reload,
        queue_dist_681_reload,
        queue_dist_680_reload,
        queue_dist_679_reload,
        queue_dist_678_reload,
        queue_dist_677_reload,
        queue_dist_676_reload,
        queue_dist_reload,
        queue_dist_711_reload,
        queue_dist_712_reload,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [95:0] s_intermediate_result_with_offset_i_4_din;
input  [3:0] s_intermediate_result_with_offset_i_4_num_data_valid;
input  [3:0] s_intermediate_result_with_offset_i_4_fifo_cap;
input   s_intermediate_result_with_offset_i_4_full_n;
output   s_intermediate_result_with_offset_i_4_write;
input  [31:0] queue_cell_ID_528_reload;
input  [31:0] queue_cell_ID_527_reload;
input  [31:0] queue_cell_ID_526_reload;
input  [31:0] queue_cell_ID_525_reload;
input  [31:0] queue_cell_ID_524_reload;
input  [31:0] queue_cell_ID_523_reload;
input  [31:0] queue_cell_ID_522_reload;
input  [31:0] queue_cell_ID_521_reload;
input  [31:0] queue_cell_ID_520_reload;
input  [31:0] queue_cell_ID_519_reload;
input  [31:0] queue_cell_ID_518_reload;
input  [31:0] queue_cell_ID_517_reload;
input  [31:0] queue_cell_ID_516_reload;
input  [31:0] queue_cell_ID_515_reload;
input  [31:0] queue_cell_ID_514_reload;
input  [31:0] queue_cell_ID_513_reload;
input  [31:0] queue_cell_ID_512_reload;
input  [31:0] queue_cell_ID_511_reload;
input  [31:0] queue_cell_ID_510_reload;
input  [31:0] queue_cell_ID_509_reload;
input  [31:0] queue_cell_ID_508_reload;
input  [31:0] queue_cell_ID_507_reload;
input  [31:0] queue_cell_ID_506_reload;
input  [31:0] queue_cell_ID_505_reload;
input  [31:0] queue_cell_ID_504_reload;
input  [31:0] queue_cell_ID_503_reload;
input  [31:0] queue_cell_ID_502_reload;
input  [31:0] queue_cell_ID_501_reload;
input  [31:0] queue_cell_ID_500_reload;
input  [31:0] queue_cell_ID_499_reload;
input  [31:0] queue_cell_ID_498_reload;
input  [31:0] queue_cell_ID_497_reload;
input  [31:0] queue_cell_ID_496_reload;
input  [31:0] queue_cell_ID_495_reload;
input  [31:0] queue_cell_ID_494_reload;
input  [31:0] queue_cell_ID_493_reload;
input  [31:0] queue_cell_ID_492_reload;
input  [31:0] queue_cell_ID_491_reload;
input  [31:0] queue_offset_528_reload;
input  [31:0] queue_offset_527_reload;
input  [31:0] queue_offset_526_reload;
input  [31:0] queue_offset_525_reload;
input  [31:0] queue_offset_524_reload;
input  [31:0] queue_offset_523_reload;
input  [31:0] queue_offset_522_reload;
input  [31:0] queue_offset_521_reload;
input  [31:0] queue_offset_520_reload;
input  [31:0] queue_offset_519_reload;
input  [31:0] queue_offset_518_reload;
input  [31:0] queue_offset_517_reload;
input  [31:0] queue_offset_516_reload;
input  [31:0] queue_offset_515_reload;
input  [31:0] queue_offset_514_reload;
input  [31:0] queue_offset_513_reload;
input  [31:0] queue_offset_512_reload;
input  [31:0] queue_offset_511_reload;
input  [31:0] queue_offset_510_reload;
input  [31:0] queue_offset_509_reload;
input  [31:0] queue_offset_508_reload;
input  [31:0] queue_offset_507_reload;
input  [31:0] queue_offset_506_reload;
input  [31:0] queue_offset_505_reload;
input  [31:0] queue_offset_504_reload;
input  [31:0] queue_offset_503_reload;
input  [31:0] queue_offset_502_reload;
input  [31:0] queue_offset_501_reload;
input  [31:0] queue_offset_500_reload;
input  [31:0] queue_offset_499_reload;
input  [31:0] queue_offset_498_reload;
input  [31:0] queue_offset_497_reload;
input  [31:0] queue_offset_496_reload;
input  [31:0] queue_offset_495_reload;
input  [31:0] queue_offset_494_reload;
input  [31:0] queue_offset_493_reload;
input  [31:0] queue_offset_492_reload;
input  [31:0] queue_offset_491_reload;
input  [31:0] queue_dist_710_reload;
input  [31:0] queue_dist_709_reload;
input  [31:0] queue_dist_708_reload;
input  [31:0] queue_dist_707_reload;
input  [31:0] queue_dist_706_reload;
input  [31:0] queue_dist_705_reload;
input  [31:0] queue_dist_704_reload;
input  [31:0] queue_dist_703_reload;
input  [31:0] queue_dist_702_reload;
input  [31:0] queue_dist_701_reload;
input  [31:0] queue_dist_700_reload;
input  [31:0] queue_dist_699_reload;
input  [31:0] queue_dist_698_reload;
input  [31:0] queue_dist_697_reload;
input  [31:0] queue_dist_696_reload;
input  [31:0] queue_dist_695_reload;
input  [31:0] queue_dist_694_reload;
input  [31:0] queue_dist_693_reload;
input  [31:0] queue_dist_692_reload;
input  [31:0] queue_dist_691_reload;
input  [31:0] queue_dist_690_reload;
input  [31:0] queue_dist_689_reload;
input  [31:0] queue_dist_688_reload;
input  [31:0] queue_dist_687_reload;
input  [31:0] queue_dist_686_reload;
input  [31:0] queue_dist_685_reload;
input  [31:0] queue_dist_684_reload;
input  [31:0] queue_dist_683_reload;
input  [31:0] queue_dist_682_reload;
input  [31:0] queue_dist_681_reload;
input  [31:0] queue_dist_680_reload;
input  [31:0] queue_dist_679_reload;
input  [31:0] queue_dist_678_reload;
input  [31:0] queue_dist_677_reload;
input  [31:0] queue_dist_676_reload;
input  [31:0] queue_dist_reload;
input  [31:0] queue_dist_711_reload;
input  [31:0] queue_dist_712_reload;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_idle;
reg s_intermediate_result_with_offset_i_4_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln55_fu_975_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    s_intermediate_result_with_offset_i_4_blk_n;
wire    ap_block_pp0_stage0;
wire   [31:0] tmp_fu_981_p41;
reg   [31:0] tmp_reg_1266;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] tmp_s_fu_1065_p41;
reg   [31:0] tmp_s_reg_1271;
wire   [31:0] tmp_3_fu_1149_p41;
reg   [31:0] tmp_3_reg_1276;
reg   [5:0] i_fu_272;
wire   [5:0] add_ln55_fu_1233_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_11;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln174_fu_1244_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_int_blocking_cur_n;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U6536(
    .din0(32'd0),
    .din1(queue_cell_ID_528_reload),
    .din2(queue_cell_ID_527_reload),
    .din3(queue_cell_ID_526_reload),
    .din4(queue_cell_ID_525_reload),
    .din5(queue_cell_ID_524_reload),
    .din6(queue_cell_ID_523_reload),
    .din7(queue_cell_ID_522_reload),
    .din8(queue_cell_ID_521_reload),
    .din9(queue_cell_ID_520_reload),
    .din10(queue_cell_ID_519_reload),
    .din11(queue_cell_ID_518_reload),
    .din12(queue_cell_ID_517_reload),
    .din13(queue_cell_ID_516_reload),
    .din14(queue_cell_ID_515_reload),
    .din15(queue_cell_ID_514_reload),
    .din16(queue_cell_ID_513_reload),
    .din17(queue_cell_ID_512_reload),
    .din18(queue_cell_ID_511_reload),
    .din19(queue_cell_ID_510_reload),
    .din20(queue_cell_ID_509_reload),
    .din21(queue_cell_ID_508_reload),
    .din22(queue_cell_ID_507_reload),
    .din23(queue_cell_ID_506_reload),
    .din24(queue_cell_ID_505_reload),
    .din25(queue_cell_ID_504_reload),
    .din26(queue_cell_ID_503_reload),
    .din27(queue_cell_ID_502_reload),
    .din28(queue_cell_ID_501_reload),
    .din29(queue_cell_ID_500_reload),
    .din30(queue_cell_ID_499_reload),
    .din31(queue_cell_ID_498_reload),
    .din32(queue_cell_ID_497_reload),
    .din33(queue_cell_ID_496_reload),
    .din34(queue_cell_ID_495_reload),
    .din35(queue_cell_ID_494_reload),
    .din36(queue_cell_ID_493_reload),
    .din37(queue_cell_ID_492_reload),
    .din38(queue_cell_ID_491_reload),
    .din39(ap_sig_allocacmp_i_11),
    .dout(tmp_fu_981_p41)
);

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U6537(
    .din0(32'd0),
    .din1(queue_offset_528_reload),
    .din2(queue_offset_527_reload),
    .din3(queue_offset_526_reload),
    .din4(queue_offset_525_reload),
    .din5(queue_offset_524_reload),
    .din6(queue_offset_523_reload),
    .din7(queue_offset_522_reload),
    .din8(queue_offset_521_reload),
    .din9(queue_offset_520_reload),
    .din10(queue_offset_519_reload),
    .din11(queue_offset_518_reload),
    .din12(queue_offset_517_reload),
    .din13(queue_offset_516_reload),
    .din14(queue_offset_515_reload),
    .din15(queue_offset_514_reload),
    .din16(queue_offset_513_reload),
    .din17(queue_offset_512_reload),
    .din18(queue_offset_511_reload),
    .din19(queue_offset_510_reload),
    .din20(queue_offset_509_reload),
    .din21(queue_offset_508_reload),
    .din22(queue_offset_507_reload),
    .din23(queue_offset_506_reload),
    .din24(queue_offset_505_reload),
    .din25(queue_offset_504_reload),
    .din26(queue_offset_503_reload),
    .din27(queue_offset_502_reload),
    .din28(queue_offset_501_reload),
    .din29(queue_offset_500_reload),
    .din30(queue_offset_499_reload),
    .din31(queue_offset_498_reload),
    .din32(queue_offset_497_reload),
    .din33(queue_offset_496_reload),
    .din34(queue_offset_495_reload),
    .din35(queue_offset_494_reload),
    .din36(queue_offset_493_reload),
    .din37(queue_offset_492_reload),
    .din38(queue_offset_491_reload),
    .din39(ap_sig_allocacmp_i_11),
    .dout(tmp_s_fu_1065_p41)
);

vadd_mux_396_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mux_396_32_1_1_U6538(
    .din0(32'd0),
    .din1(queue_dist_710_reload),
    .din2(queue_dist_709_reload),
    .din3(queue_dist_708_reload),
    .din4(queue_dist_707_reload),
    .din5(queue_dist_706_reload),
    .din6(queue_dist_705_reload),
    .din7(queue_dist_704_reload),
    .din8(queue_dist_703_reload),
    .din9(queue_dist_702_reload),
    .din10(queue_dist_701_reload),
    .din11(queue_dist_700_reload),
    .din12(queue_dist_699_reload),
    .din13(queue_dist_698_reload),
    .din14(queue_dist_697_reload),
    .din15(queue_dist_696_reload),
    .din16(queue_dist_695_reload),
    .din17(queue_dist_694_reload),
    .din18(queue_dist_693_reload),
    .din19(queue_dist_692_reload),
    .din20(queue_dist_691_reload),
    .din21(queue_dist_690_reload),
    .din22(queue_dist_689_reload),
    .din23(queue_dist_688_reload),
    .din24(queue_dist_687_reload),
    .din25(queue_dist_686_reload),
    .din26(queue_dist_685_reload),
    .din27(queue_dist_684_reload),
    .din28(queue_dist_683_reload),
    .din29(queue_dist_682_reload),
    .din30(queue_dist_681_reload),
    .din31(queue_dist_680_reload),
    .din32(queue_dist_679_reload),
    .din33(queue_dist_678_reload),
    .din34(queue_dist_677_reload),
    .din35(queue_dist_676_reload),
    .din36(queue_dist_reload),
    .din37(queue_dist_711_reload),
    .din38(queue_dist_712_reload),
    .din39(ap_sig_allocacmp_i_11),
    .dout(tmp_3_fu_1149_p41)
);

vadd_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln55_fu_975_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_272 <= add_ln55_fu_1233_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_272 <= 6'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_975_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_reg_1276 <= tmp_3_fu_1149_p41;
        tmp_reg_1266 <= tmp_fu_981_p41;
        tmp_s_reg_1271 <= tmp_s_fu_1065_p41;
    end
end

always @ (*) begin
    if (((icmp_ln55_fu_975_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_11 = 6'd1;
    end else begin
        ap_sig_allocacmp_i_11 = i_fu_272;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_intermediate_result_with_offset_i_4_blk_n = s_intermediate_result_with_offset_i_4_full_n;
    end else begin
        s_intermediate_result_with_offset_i_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_intermediate_result_with_offset_i_4_write = 1'b1;
    end else begin
        s_intermediate_result_with_offset_i_4_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_1233_p2 = (ap_sig_allocacmp_i_11 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((s_intermediate_result_with_offset_i_4_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((s_intermediate_result_with_offset_i_4_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((s_intermediate_result_with_offset_i_4_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (s_intermediate_result_with_offset_i_4_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_cur_n = s_intermediate_result_with_offset_i_4_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_cur_n & 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_str_blocking_n = (1'b1 & 1'b1);

assign bitcast_ln174_fu_1244_p1 = tmp_3_reg_1276;

assign icmp_ln55_fu_975_p2 = ((ap_sig_allocacmp_i_11 == 6'd39) ? 1'b1 : 1'b0);

assign s_intermediate_result_with_offset_i_4_din = {{{bitcast_ln174_fu_1244_p1}, {tmp_s_reg_1271}}, {tmp_reg_1266}};

endmodule //vadd_insert_wrapper_25_Pipeline_VITIS_LOOP_55_4
